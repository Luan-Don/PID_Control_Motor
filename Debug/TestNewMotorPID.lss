
TestNewMotorPID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000016cc  00001760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800122  00800122  00001782  2**0
                  ALLOC
  3 .stab         0000132c  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012cc  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005c  00000000  00000000  00003d7c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003dd8  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00004cc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_1>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ec       	ldi	r30, 0xCC	; 204
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 32       	cpi	r26, 0x22	; 34
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e2       	ldi	r26, 0x22	; 34
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 34       	cpi	r26, 0x4E	; 78
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
void MotorSpeedPID(float desiredSpeed);
float absolute(float number);
void init_TIMER();
void init_IO();

int main(void) {
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	2e 97       	sbiw	r28, 0x0e	; 14
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	f8 94       	cli
      dc:	de bf       	out	0x3e, r29	; 62
      de:	0f be       	out	0x3f, r0	; 63
      e0:	cd bf       	out	0x3d, r28	; 61
	init_LCD();
      e2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <init_LCD>
	init_IO();
      e6:	0e 94 92 03 	call	0x724	; 0x724 <init_IO>
	init_TIMER();
      ea:	0e 94 4e 03 	call	0x69c	; 0x69c <init_TIMER>
	sei(); // Global interrupt
      ee:	78 94       	sei
	while (1) {
		clr_LCD();
      f0:	0e 94 94 05 	call	0xb28	; 0xb28 <clr_LCD>
		move_LCD(1, 1);
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	0e 94 6a 05 	call	0xad4	; 0xad4 <move_LCD>
		//printf_LCD("Pulse %d", prePulse);
		printf_LCD("Speed: %.2f RPM", currentSpeed);
      fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentSpeed>
     100:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentSpeed+0x1>
     104:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <currentSpeed+0x2>
     108:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <currentSpeed+0x3>
     10c:	2b 2f       	mov	r18, r27
     10e:	2f 93       	push	r18
     110:	2a 2f       	mov	r18, r26
     112:	2f 93       	push	r18
     114:	29 2f       	mov	r18, r25
     116:	2f 93       	push	r18
     118:	8f 93       	push	r24
     11a:	8a e0       	ldi	r24, 0x0A	; 10
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	89 2f       	mov	r24, r25
     120:	8f 93       	push	r24
     122:	8a e0       	ldi	r24, 0x0A	; 10
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	8f 93       	push	r24
     128:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_LCD>
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
		move_LCD(2, 1);
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	0e 94 6a 05 	call	0xad4	; 0xad4 <move_LCD>
		//printf_LCD("Error: %d", error);
		//printf_LCD("Pulse %d", pulse);
		//printf_LCD("Diff %d", diff);
		printf_LCD("PWM: %d", PID);
     140:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <PID>
     144:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <PID+0x1>
     148:	29 2f       	mov	r18, r25
     14a:	2f 93       	push	r18
     14c:	8f 93       	push	r24
     14e:	8a e1       	ldi	r24, 0x1A	; 26
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	89 2f       	mov	r24, r25
     154:	8f 93       	push	r24
     156:	8a e1       	ldi	r24, 0x1A	; 26
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	8f 93       	push	r24
     15c:	0e 94 ed 05 	call	0xbda	; 0xbda <printf_LCD>
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	a6 e9       	ldi	r26, 0x96	; 150
     16e:	b3 e4       	ldi	r27, 0x43	; 67
     170:	89 83       	std	Y+1, r24	; 0x01
     172:	9a 83       	std	Y+2, r25	; 0x02
     174:	ab 83       	std	Y+3, r26	; 0x03
     176:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     178:	26 e6       	ldi	r18, 0x66	; 102
     17a:	36 e6       	ldi	r19, 0x66	; 102
     17c:	46 ee       	ldi	r20, 0xE6	; 230
     17e:	54 e4       	ldi	r21, 0x44	; 68
     180:	69 81       	ldd	r22, Y+1	; 0x01
     182:	7a 81       	ldd	r23, Y+2	; 0x02
     184:	8b 81       	ldd	r24, Y+3	; 0x03
     186:	9c 81       	ldd	r25, Y+4	; 0x04
     188:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulsf3>
     18c:	dc 01       	movw	r26, r24
     18e:	cb 01       	movw	r24, r22
     190:	8d 83       	std	Y+5, r24	; 0x05
     192:	9e 83       	std	Y+6, r25	; 0x06
     194:	af 83       	std	Y+7, r26	; 0x07
     196:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e8       	ldi	r20, 0x80	; 128
     19e:	5f e3       	ldi	r21, 0x3F	; 63
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	0e 94 a0 06 	call	0xd40	; 0xd40 <__cmpsf2>
     1ac:	88 23       	and	r24, r24
     1ae:	2c f4       	brge	.+10     	; 0x1ba <main+0xec>
		__ticks = 1;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9a 87       	std	Y+10, r25	; 0x0a
     1b6:	89 87       	std	Y+9, r24	; 0x09
     1b8:	3f c0       	rjmp	.+126    	; 0x238 <main+0x16a>
	else if (__tmp > 65535)
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	3f ef       	ldi	r19, 0xFF	; 255
     1be:	4f e7       	ldi	r20, 0x7F	; 127
     1c0:	57 e4       	ldi	r21, 0x47	; 71
     1c2:	6d 81       	ldd	r22, Y+5	; 0x05
     1c4:	7e 81       	ldd	r23, Y+6	; 0x06
     1c6:	8f 81       	ldd	r24, Y+7	; 0x07
     1c8:	98 85       	ldd	r25, Y+8	; 0x08
     1ca:	0e 94 ff 07 	call	0xffe	; 0xffe <__gesf2>
     1ce:	18 16       	cp	r1, r24
     1d0:	4c f5       	brge	.+82     	; 0x224 <main+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	51 e4       	ldi	r21, 0x41	; 65
     1da:	69 81       	ldd	r22, Y+1	; 0x01
     1dc:	7a 81       	ldd	r23, Y+2	; 0x02
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	9c 81       	ldd	r25, Y+4	; 0x04
     1e2:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulsf3>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	bc 01       	movw	r22, r24
     1ec:	cd 01       	movw	r24, r26
     1ee:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixunssfsi>
     1f2:	dc 01       	movw	r26, r24
     1f4:	cb 01       	movw	r24, r22
     1f6:	9a 87       	std	Y+10, r25	; 0x0a
     1f8:	89 87       	std	Y+9, r24	; 0x09
     1fa:	0f c0       	rjmp	.+30     	; 0x21a <main+0x14c>
     1fc:	88 eb       	ldi	r24, 0xB8	; 184
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	9c 87       	std	Y+12, r25	; 0x0c
     202:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     204:	8b 85       	ldd	r24, Y+11	; 0x0b
     206:	9c 85       	ldd	r25, Y+12	; 0x0c
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <main+0x13a>
     20c:	9c 87       	std	Y+12, r25	; 0x0c
     20e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     210:	89 85       	ldd	r24, Y+9	; 0x09
     212:	9a 85       	ldd	r25, Y+10	; 0x0a
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	9a 87       	std	Y+10, r25	; 0x0a
     218:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     21a:	89 85       	ldd	r24, Y+9	; 0x09
     21c:	9a 85       	ldd	r25, Y+10	; 0x0a
     21e:	89 2b       	or	r24, r25
     220:	69 f7       	brne	.-38     	; 0x1fc <main+0x12e>
     222:	14 c0       	rjmp	.+40     	; 0x24c <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     224:	6d 81       	ldd	r22, Y+5	; 0x05
     226:	7e 81       	ldd	r23, Y+6	; 0x06
     228:	8f 81       	ldd	r24, Y+7	; 0x07
     22a:	98 85       	ldd	r25, Y+8	; 0x08
     22c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixunssfsi>
     230:	dc 01       	movw	r26, r24
     232:	cb 01       	movw	r24, r22
     234:	9a 87       	std	Y+10, r25	; 0x0a
     236:	89 87       	std	Y+9, r24	; 0x09
     238:	89 85       	ldd	r24, Y+9	; 0x09
     23a:	9a 85       	ldd	r25, Y+10	; 0x0a
     23c:	9e 87       	std	Y+14, r25	; 0x0e
     23e:	8d 87       	std	Y+13, r24	; 0x0d
     240:	8d 85       	ldd	r24, Y+13	; 0x0d
     242:	9e 85       	ldd	r25, Y+14	; 0x0e
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <main+0x176>
     248:	9e 87       	std	Y+14, r25	; 0x0e
     24a:	8d 87       	std	Y+13, r24	; 0x0d
//			printf_LCD("Clocwise rotation");
//		}else{
//			printf_LCD("Reverse rotation");
//		}
		_delay_ms(300);
	}
     24c:	51 cf       	rjmp	.-350    	; 0xf0 <main+0x22>

0000024e <__vector_14>:
}

ISR(TIMER1_OVF_vect) { //update sampling time
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     25e:	0f 92       	push	r0
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 61936;
     280:	8c e4       	ldi	r24, 0x4C	; 76
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	20 ef       	ldi	r18, 0xF0	; 240
     286:	31 ef       	ldi	r19, 0xF1	; 241
     288:	fc 01       	movw	r30, r24
     28a:	31 83       	std	Z+1, r19	; 0x01
     28c:	20 83       	st	Z, r18
	MotorSpeedPID(controlSpeed);
     28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     292:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     296:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     29a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	0e 94 a9 01 	call	0x352	; 0x352 <MotorSpeedPID>
	pulse = 0;
     2a6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
     2aa:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
}
     2ae:	00 00       	nop
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	ff 91       	pop	r31
     2b6:	ef 91       	pop	r30
     2b8:	bf 91       	pop	r27
     2ba:	af 91       	pop	r26
     2bc:	9f 91       	pop	r25
     2be:	8f 91       	pop	r24
     2c0:	7f 91       	pop	r23
     2c2:	6f 91       	pop	r22
     2c4:	5f 91       	pop	r21
     2c6:	4f 91       	pop	r20
     2c8:	3f 91       	pop	r19
     2ca:	2f 91       	pop	r18
     2cc:	0f 90       	pop	r0
     2ce:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     2d2:	0f 90       	pop	r0
     2d4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <__vector_1>:

ISR(INT0_vect) {
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     2ee:	0f 92       	push	r0
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
     2f4:	ef 93       	push	r30
     2f6:	ff 93       	push	r31
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
	pulse++;
     300:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     304:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
     30e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
	if (bit_is_set(ENCODER_CHECK_PIN, B)) {
     312:	80 e3       	ldi	r24, 0x30	; 48
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	80 81       	ld	r24, Z
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	82 70       	andi	r24, 0x02	; 2
     320:	99 27       	eor	r25, r25
     322:	89 2b       	or	r24, r25
     324:	19 f0       	breq	.+6      	; 0x32c <__vector_1+0x4e>
		direction = 0;
     326:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <direction>
	} else {
		direction = 1;
	}
}
     32a:	03 c0       	rjmp	.+6      	; 0x332 <__vector_1+0x54>
ISR(INT0_vect) {
	pulse++;
	if (bit_is_set(ENCODER_CHECK_PIN, B)) {
		direction = 0;
	} else {
		direction = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <direction>
	}
}
     332:	00 00       	nop
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	ff 91       	pop	r31
     33a:	ef 91       	pop	r30
     33c:	9f 91       	pop	r25
     33e:	8f 91       	pop	r24
     340:	0f 90       	pop	r0
     342:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     346:	0f 90       	pop	r0
     348:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <MotorSpeedPID>:

void MotorSpeedPID(float desiredSpeed) {
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	00 d0       	rcall	.+0      	; 0x364 <MotorSpeedPID+0x12>
     364:	00 d0       	rcall	.+0      	; 0x366 <MotorSpeedPID+0x14>
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	69 83       	std	Y+1, r22	; 0x01
     36c:	7a 83       	std	Y+2, r23	; 0x02
     36e:	8b 83       	std	Y+3, r24	; 0x03
     370:	9c 83       	std	Y+4, r25	; 0x04
	currentSpeed = pulse * 1000 / samplingTime / 135.0; // calculate recent speed
     372:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
     376:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <__data_end+0x1>
     37a:	88 ee       	ldi	r24, 0xE8	; 232
     37c:	93 e0       	ldi	r25, 0x03	; 3
     37e:	28 9f       	mul	r18, r24
     380:	a0 01       	movw	r20, r0
     382:	29 9f       	mul	r18, r25
     384:	50 0d       	add	r21, r0
     386:	38 9f       	mul	r19, r24
     388:	50 0d       	add	r21, r0
     38a:	11 24       	eor	r1, r1
     38c:	24 ef       	ldi	r18, 0xF4	; 244
     38e:	31 e0       	ldi	r19, 0x01	; 1
     390:	ca 01       	movw	r24, r20
     392:	b9 01       	movw	r22, r18
     394:	0e 94 0b 06 	call	0xc16	; 0xc16 <__divmodhi4>
     398:	cb 01       	movw	r24, r22
     39a:	09 2e       	mov	r0, r25
     39c:	00 0c       	add	r0, r0
     39e:	aa 0b       	sbc	r26, r26
     3a0:	bb 0b       	sbc	r27, r27
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatsisf>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	47 e0       	ldi	r20, 0x07	; 7
     3b4:	53 e4       	ldi	r21, 0x43	; 67
     3b6:	bc 01       	movw	r22, r24
     3b8:	cd 01       	movw	r24, r26
     3ba:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__divsf3>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentSpeed>
     3c6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <currentSpeed+0x1>
     3ca:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <currentSpeed+0x2>
     3ce:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <currentSpeed+0x3>
	error = desiredSpeed - currentSpeed; // calculate error
     3d2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentSpeed>
     3d6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentSpeed+0x1>
     3da:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <currentSpeed+0x2>
     3de:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <currentSpeed+0x3>
     3e2:	9c 01       	movw	r18, r24
     3e4:	ad 01       	movw	r20, r26
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	9c 81       	ldd	r25, Y+4	; 0x04
     3ee:	0e 94 33 06 	call	0xc66	; 0xc66 <__subsf3>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <error>
     3fa:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <error+0x1>
     3fe:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <error+0x2>
     402:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <error+0x3>
	//diff = error - preError;
	// PID part
	pPart = Kp * error;
     406:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Kp>
     40a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Kp+0x1>
     40e:	09 2e       	mov	r0, r25
     410:	00 0c       	add	r0, r0
     412:	aa 0b       	sbc	r26, r26
     414:	bb 0b       	sbc	r27, r27
     416:	bc 01       	movw	r22, r24
     418:	cd 01       	movw	r24, r26
     41a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatsisf>
     41e:	7b 01       	movw	r14, r22
     420:	8c 01       	movw	r16, r24
     422:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <error>
     426:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <error+0x1>
     42a:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <error+0x2>
     42e:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <error+0x3>
     432:	9c 01       	movw	r18, r24
     434:	ad 01       	movw	r20, r26
     436:	c8 01       	movw	r24, r16
     438:	b7 01       	movw	r22, r14
     43a:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulsf3>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	bc 01       	movw	r22, r24
     444:	cd 01       	movw	r24, r26
     446:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixsfsi>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pPart+0x1>
     452:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pPart>
	dPart = Kd * (error - preError) * 1000 / samplingTime;
     456:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Kd>
     45a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Kd+0x1>
     45e:	09 2e       	mov	r0, r25
     460:	00 0c       	add	r0, r0
     462:	aa 0b       	sbc	r26, r26
     464:	bb 0b       	sbc	r27, r27
     466:	bc 01       	movw	r22, r24
     468:	cd 01       	movw	r24, r26
     46a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatsisf>
     46e:	6b 01       	movw	r12, r22
     470:	7c 01       	movw	r14, r24
     472:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <error>
     476:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <error+0x1>
     47a:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <error+0x2>
     47e:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <error+0x3>
     482:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <preError>
     486:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <preError+0x1>
     48a:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <preError+0x2>
     48e:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <preError+0x3>
     492:	bc 01       	movw	r22, r24
     494:	cd 01       	movw	r24, r26
     496:	0e 94 33 06 	call	0xc66	; 0xc66 <__subsf3>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	9c 01       	movw	r18, r24
     4a0:	ad 01       	movw	r20, r26
     4a2:	c7 01       	movw	r24, r14
     4a4:	b6 01       	movw	r22, r12
     4a6:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulsf3>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	4a e7       	ldi	r20, 0x7A	; 122
     4b4:	54 e4       	ldi	r21, 0x44	; 68
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulsf3>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4a ef       	ldi	r20, 0xFA	; 250
     4c8:	53 e4       	ldi	r21, 0x43	; 67
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__divsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	bc 01       	movw	r22, r24
     4d8:	cd 01       	movw	r24, r26
     4da:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixsfsi>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <dPart+0x1>
     4e6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <dPart>
	iPart += Ki * error * samplingTime / 1000;
     4ea:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Ki>
     4ee:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Ki+0x1>
     4f2:	09 2e       	mov	r0, r25
     4f4:	00 0c       	add	r0, r0
     4f6:	aa 0b       	sbc	r26, r26
     4f8:	bb 0b       	sbc	r27, r27
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatsisf>
     502:	7b 01       	movw	r14, r22
     504:	8c 01       	movw	r16, r24
     506:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <error>
     50a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <error+0x1>
     50e:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <error+0x2>
     512:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <error+0x3>
     516:	9c 01       	movw	r18, r24
     518:	ad 01       	movw	r20, r26
     51a:	c8 01       	movw	r24, r16
     51c:	b7 01       	movw	r22, r14
     51e:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulsf3>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4a ef       	ldi	r20, 0xFA	; 250
     52c:	53 e4       	ldi	r21, 0x43	; 67
     52e:	bc 01       	movw	r22, r24
     530:	cd 01       	movw	r24, r26
     532:	0e 94 04 08 	call	0x1008	; 0x1008 <__mulsf3>
     536:	dc 01       	movw	r26, r24
     538:	cb 01       	movw	r24, r22
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	4a e7       	ldi	r20, 0x7A	; 122
     540:	54 e4       	ldi	r21, 0x44	; 68
     542:	bc 01       	movw	r22, r24
     544:	cd 01       	movw	r24, r26
     546:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__divsf3>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	6c 01       	movw	r12, r24
     550:	7d 01       	movw	r14, r26
     552:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <iPart>
     556:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <iPart+0x1>
     55a:	09 2e       	mov	r0, r25
     55c:	00 0c       	add	r0, r0
     55e:	aa 0b       	sbc	r26, r26
     560:	bb 0b       	sbc	r27, r27
     562:	bc 01       	movw	r22, r24
     564:	cd 01       	movw	r24, r26
     566:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__floatsisf>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	a7 01       	movw	r20, r14
     570:	96 01       	movw	r18, r12
     572:	bc 01       	movw	r22, r24
     574:	cd 01       	movw	r24, r26
     576:	0e 94 34 06 	call	0xc68	; 0xc68 <__addsf3>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	bc 01       	movw	r22, r24
     580:	cd 01       	movw	r24, r26
     582:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fixsfsi>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <iPart+0x1>
     58e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <iPart>
	PID += pPart + dPart + iPart;
     592:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <pPart>
     596:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <pPart+0x1>
     59a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <dPart>
     59e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <dPart+0x1>
     5a2:	28 0f       	add	r18, r24
     5a4:	39 1f       	adc	r19, r25
     5a6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <iPart>
     5aa:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <iPart+0x1>
     5ae:	28 0f       	add	r18, r24
     5b0:	39 1f       	adc	r19, r25
     5b2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <PID>
     5b6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <PID+0x1>
     5ba:	82 0f       	add	r24, r18
     5bc:	93 1f       	adc	r25, r19
     5be:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <PID+0x1>
     5c2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <PID>
	if (PID > maxPwmPeriod) {
     5c6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <PID>
     5ca:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <PID+0x1>
     5ce:	81 32       	cpi	r24, 0x21	; 33
     5d0:	9c 41       	sbci	r25, 0x1C	; 28
     5d2:	34 f0       	brlt	.+12     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
		PID = maxPwmPeriod;
     5d4:	80 e2       	ldi	r24, 0x20	; 32
     5d6:	9c e1       	ldi	r25, 0x1C	; 28
     5d8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <PID+0x1>
     5dc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <PID>
	}
	if (PID < 0) {
     5e0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <PID>
     5e4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <PID+0x1>
     5e8:	99 23       	and	r25, r25
     5ea:	34 f4       	brge	.+12     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		PID = 1;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <PID+0x1>
     5f4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <PID>
//	if(currentSpeed == desiredSpeed){
//		exactPID = PID;
//		OCR3A = exactPID;
//	}
//	else{
		OCR3A = PID;
     5f8:	86 e8       	ldi	r24, 0x86	; 134
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <PID>
     600:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <PID+0x1>
     604:	fc 01       	movw	r30, r24
     606:	31 83       	std	Z+1, r19	; 0x01
     608:	20 83       	st	Z, r18
	//}

	//prePulse = pulse;
	preError = error;
     60a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <error>
     60e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <error+0x1>
     612:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <error+0x2>
     616:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <error+0x3>
     61a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <preError>
     61e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <preError+0x1>
     622:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <preError+0x2>
     626:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <preError+0x3>
}
     62a:	00 00       	nop
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	08 95       	ret

00000646 <absolute>:
float absolute(float number) {
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	00 d0       	rcall	.+0      	; 0x64c <absolute+0x6>
     64c:	00 d0       	rcall	.+0      	; 0x64e <absolute+0x8>
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
	if (number < 0) {
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	a9 01       	movw	r20, r18
     660:	69 81       	ldd	r22, Y+1	; 0x01
     662:	7a 81       	ldd	r23, Y+2	; 0x02
     664:	8b 81       	ldd	r24, Y+3	; 0x03
     666:	9c 81       	ldd	r25, Y+4	; 0x04
     668:	0e 94 a0 06 	call	0xd40	; 0xd40 <__cmpsf2>
     66c:	88 23       	and	r24, r24
     66e:	4c f4       	brge	.+18     	; 0x682 <absolute+0x3c>
		number = -number;
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	ab 81       	ldd	r26, Y+3	; 0x03
     676:	bc 81       	ldd	r27, Y+4	; 0x04
     678:	b0 58       	subi	r27, 0x80	; 128
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	9a 83       	std	Y+2, r25	; 0x02
     67e:	ab 83       	std	Y+3, r26	; 0x03
     680:	bc 83       	std	Y+4, r27	; 0x04
	}
	return number;
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	ab 81       	ldd	r26, Y+3	; 0x03
     688:	bc 81       	ldd	r27, Y+4	; 0x04
}
     68a:	bc 01       	movw	r22, r24
     68c:	cd 01       	movw	r24, r26
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <init_TIMER>:
void init_TIMER() {
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
//	// Timer 0 delay
//	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00); // F_Timer0 = F_CPU/1024 = 7200UL
//	TCNT0 = 76; // TCNT0 value = 256 - 7200*25/1000 = 76 for 25ms sampling time
//	TIMSK |= (1 << TOIE0);
	// Timer 1 delay
	TCCR1B |= (1<<CS12)|(1<<CS10);
     6a4:	8e e4       	ldi	r24, 0x4E	; 78
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	2e e4       	ldi	r18, 0x4E	; 78
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	25 60       	ori	r18, 0x05	; 5
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
	TCNT1 = 100; // TCNT1 value = 65536 - 7200*samplingTime/1000 = 61936
     6b6:	8c e4       	ldi	r24, 0x4C	; 76
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	24 e6       	ldi	r18, 0x64	; 100
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	31 83       	std	Z+1, r19	; 0x01
     6c2:	20 83       	st	Z, r18
	TIMSK |= (1<<TOIE1);
     6c4:	87 e5       	ldi	r24, 0x57	; 87
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	27 e5       	ldi	r18, 0x57	; 87
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	f9 01       	movw	r30, r18
     6ce:	20 81       	ld	r18, Z
     6d0:	24 60       	ori	r18, 0x04	; 4
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 83       	st	Z, r18

	// Timer 3 PWM pulse
	TCCR3A |= (1 << COM3A1) | (1 << WGM31); 	// Mode Fast PWM 14
     6d6:	8b e8       	ldi	r24, 0x8B	; 139
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	2b e8       	ldi	r18, 0x8B	; 139
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	f9 01       	movw	r30, r18
     6e0:	20 81       	ld	r18, Z
     6e2:	22 68       	ori	r18, 0x82	; 130
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
	TCCR3B |= (1 << WGM33) | (1 << WGM32) | (1 << CS30); // F_Timer3 = F_CPU
     6e8:	8a e8       	ldi	r24, 0x8A	; 138
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	2a e8       	ldi	r18, 0x8A	; 138
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	29 61       	ori	r18, 0x19	; 25
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
	TCNT3 = 0; 			// Reset counter
     6fa:	88 e8       	ldi	r24, 0x88	; 136
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	11 82       	std	Z+1, r1	; 0x01
     702:	10 82       	st	Z, r1
	ICR3 = maxPwmPeriod; 	// Set top value for 1 duty cycle
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	20 e2       	ldi	r18, 0x20	; 32
     70a:	3c e1       	ldi	r19, 0x1C	; 28
     70c:	fc 01       	movw	r30, r24
     70e:	31 83       	std	Z+1, r19	; 0x01
     710:	20 83       	st	Z, r18
	OCR3A = 0; 		 	// Set duty cycle to 0%
     712:	86 e8       	ldi	r24, 0x86	; 134
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	fc 01       	movw	r30, r24
     718:	11 82       	std	Z+1, r1	; 0x01
     71a:	10 82       	st	Z, r1
}
     71c:	00 00       	nop
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <init_IO>:
void init_IO() {
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	MOTOR_CTRL_DDR |= (1 << MOTOR_DIR_ACLKWS) | (1 << MOTOR_DIR_CLKWS);
     72c:	84 e3       	ldi	r24, 0x34	; 52
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	24 e3       	ldi	r18, 0x34	; 52
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	23 60       	ori	r18, 0x03	; 3
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
	MOTOR_CTRL_PORT |= (0 << MOTOR_DIR_ACLKWS) | (1 << MOTOR_DIR_CLKWS);
     73e:	85 e3       	ldi	r24, 0x35	; 53
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	25 e3       	ldi	r18, 0x35	; 53
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	f9 01       	movw	r30, r18
     748:	20 81       	ld	r18, Z
     74a:	21 60       	ori	r18, 0x01	; 1
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
	MOTOR_PWM_DDR |= (1 << PWM);
     750:	82 e2       	ldi	r24, 0x22	; 34
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	22 e2       	ldi	r18, 0x22	; 34
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	f9 01       	movw	r30, r18
     75a:	20 81       	ld	r18, Z
     75c:	28 60       	ori	r18, 0x08	; 8
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
	ENCODER_CHECK_DDR &= ~((1 << A) | (1 << B));
     762:	81 e3       	ldi	r24, 0x31	; 49
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	21 e3       	ldi	r18, 0x31	; 49
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	2c 7f       	andi	r18, 0xFC	; 252
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
	ENCODER_CHECK_PORT |= (1 << A) | (1 << B);
     774:	82 e3       	ldi	r24, 0x32	; 50
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	22 e3       	ldi	r18, 0x32	; 50
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	f9 01       	movw	r30, r18
     77e:	20 81       	ld	r18, Z
     780:	23 60       	ori	r18, 0x03	; 3
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
	EICRA |= (1 << ISC01); 				// Falling edge interrupt
     786:	8a e6       	ldi	r24, 0x6A	; 106
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	2a e6       	ldi	r18, 0x6A	; 106
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	22 60       	ori	r18, 0x02	; 2
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
	EIMSK |= (1 << INT0); 				// Enable interrupt 0 at A
     798:	89 e5       	ldi	r24, 0x59	; 89
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	29 e5       	ldi	r18, 0x59	; 89
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	f9 01       	movw	r30, r18
     7a2:	20 81       	ld	r18, Z
     7a4:	21 60       	ori	r18, 0x01	; 1
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
}
     7aa:	00 00       	nop
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <Read2Nib>:
 */

#include "myLCD.h"

char Read2Nib(void)
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <Read2Nib+0x6>
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
  char HNib, LNib;
  DATA_O |=0xF0;
     7bc:	8b e3       	ldi	r24, 0x3B	; 59
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	2b e3       	ldi	r18, 0x3B	; 59
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	f9 01       	movw	r30, r18
     7c6:	20 81       	ld	r18, Z
     7c8:	20 6f       	ori	r18, 0xF0	; 240
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18

  DDR_DATA &=0x0F;
     7ce:	8a e3       	ldi	r24, 0x3A	; 58
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	2a e3       	ldi	r18, 0x3A	; 58
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	f9 01       	movw	r30, r18
     7d8:	20 81       	ld	r18, Z
     7da:	2f 70       	andi	r18, 0x0F	; 15
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
  sbi(CTRL,EN); //enable
     7e0:	8b e3       	ldi	r24, 0x3B	; 59
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	2b e3       	ldi	r18, 0x3B	; 59
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	24 60       	ori	r18, 0x04	; 4
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
  sbi(CTRL,EN);
     7f2:	8b e3       	ldi	r24, 0x3B	; 59
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	2b e3       	ldi	r18, 0x3B	; 59
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	f9 01       	movw	r30, r18
     7fc:	20 81       	ld	r18, Z
     7fe:	24 60       	ori	r18, 0x04	; 4
     800:	fc 01       	movw	r30, r24
     802:	20 83       	st	Z, r18


  HNib=DATA_I & 0xF0;
     804:	89 e3       	ldi	r24, 0x39	; 57
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	80 7f       	andi	r24, 0xF0	; 240
     80e:	89 83       	std	Y+1, r24	; 0x01
  cbi(CTRL,EN); //disable
     810:	8b e3       	ldi	r24, 0x3B	; 59
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	2b e3       	ldi	r18, 0x3B	; 59
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	f9 01       	movw	r30, r18
     81a:	20 81       	ld	r18, Z
     81c:	2b 7f       	andi	r18, 0xFB	; 251
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18

  sbi(CTRL,EN); //enable
     822:	8b e3       	ldi	r24, 0x3B	; 59
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	2b e3       	ldi	r18, 0x3B	; 59
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	f9 01       	movw	r30, r18
     82c:	20 81       	ld	r18, Z
     82e:	24 60       	ori	r18, 0x04	; 4
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
  sbi(CTRL,EN);
     834:	8b e3       	ldi	r24, 0x3B	; 59
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	2b e3       	ldi	r18, 0x3B	; 59
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	f9 01       	movw	r30, r18
     83e:	20 81       	ld	r18, Z
     840:	24 60       	ori	r18, 0x04	; 4
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18
  LNib = DATA_I & 0xF0;
     846:	89 e3       	ldi	r24, 0x39	; 57
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	fc 01       	movw	r30, r24
     84c:	80 81       	ld	r24, Z
     84e:	80 7f       	andi	r24, 0xF0	; 240
     850:	8a 83       	std	Y+2, r24	; 0x02
  cbi(CTRL,EN); //disable
     852:	8b e3       	ldi	r24, 0x3B	; 59
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	2b e3       	ldi	r18, 0x3B	; 59
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	f9 01       	movw	r30, r18
     85c:	20 81       	ld	r18, Z
     85e:	2b 7f       	andi	r18, 0xFB	; 251
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18
  LNib>>=4;
     864:	8a 81       	ldd	r24, Y+2	; 0x02
     866:	82 95       	swap	r24
     868:	8f 70       	andi	r24, 0x0F	; 15
     86a:	8a 83       	std	Y+2, r24	; 0x02
  return (HNib|LNib);
     86c:	99 81       	ldd	r25, Y+1	; 0x01
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	89 2b       	or	r24, r25
}
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <Write2Nib>:

void Write2Nib(uint8_t chr)
{
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <Write2Nib+0x6>
     882:	00 d0       	rcall	.+0      	; 0x884 <Write2Nib+0x8>
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	8c 83       	std	Y+4, r24	; 0x04
  uint8_t HNib, LNib, temp_data;
  temp_data = DATA_O & 0x0F;
     88a:	8b e3       	ldi	r24, 0x3B	; 59
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	80 81       	ld	r24, Z
     892:	8f 70       	andi	r24, 0x0F	; 15
     894:	89 83       	std	Y+1, r24	; 0x01

  HNib=chr & 0xF0;
     896:	8c 81       	ldd	r24, Y+4	; 0x04
     898:	80 7f       	andi	r24, 0xF0	; 240
     89a:	8a 83       	std	Y+2, r24	; 0x02
  LNib=(chr<<4) & 0xF0;
     89c:	8c 81       	ldd	r24, Y+4	; 0x04
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	82 95       	swap	r24
     8a4:	92 95       	swap	r25
     8a6:	90 7f       	andi	r25, 0xF0	; 240
     8a8:	98 27       	eor	r25, r24
     8aa:	80 7f       	andi	r24, 0xF0	; 240
     8ac:	98 27       	eor	r25, r24
     8ae:	8b 83       	std	Y+3, r24	; 0x03

  DATA_O = (HNib | temp_data);
     8b0:	8b e3       	ldi	r24, 0x3B	; 59
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	3a 81       	ldd	r19, Y+2	; 0x02
     8b6:	29 81       	ldd	r18, Y+1	; 0x01
     8b8:	23 2b       	or	r18, r19
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
  sbi(CTRL,EN); //enable
     8be:	8b e3       	ldi	r24, 0x3B	; 59
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	2b e3       	ldi	r18, 0x3B	; 59
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	24 60       	ori	r18, 0x04	; 4
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
  cbi(CTRL,EN); //disable
     8d0:	8b e3       	ldi	r24, 0x3B	; 59
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	2b e3       	ldi	r18, 0x3B	; 59
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	f9 01       	movw	r30, r18
     8da:	20 81       	ld	r18, Z
     8dc:	2b 7f       	andi	r18, 0xFB	; 251
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18

  DATA_O = (LNib | temp_data);
     8e2:	8b e3       	ldi	r24, 0x3B	; 59
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	3b 81       	ldd	r19, Y+3	; 0x03
     8e8:	29 81       	ldd	r18, Y+1	; 0x01
     8ea:	23 2b       	or	r18, r19
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
  sbi(CTRL,EN); //enable
     8f0:	8b e3       	ldi	r24, 0x3B	; 59
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	2b e3       	ldi	r18, 0x3B	; 59
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	24 60       	ori	r18, 0x04	; 4
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
  cbi(CTRL,EN); //disable
     902:	8b e3       	ldi	r24, 0x3B	; 59
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	2b e3       	ldi	r18, 0x3B	; 59
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	f9 01       	movw	r30, r18
     90c:	20 81       	ld	r18, Z
     90e:	2b 7f       	andi	r18, 0xFB	; 251
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
}
     914:	00 00       	nop
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <Write8Bit>:

void Write8Bit(uint8_t chr)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	1f 92       	push	r1
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	89 83       	std	Y+1, r24	; 0x01
  DATA_O=chr;   //out 8 bits to DATA Line
     930:	8b e3       	ldi	r24, 0x3B	; 59
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	29 81       	ldd	r18, Y+1	; 0x01
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
  sbi(CTRL,EN); //enable
     93a:	8b e3       	ldi	r24, 0x3B	; 59
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	2b e3       	ldi	r18, 0x3B	; 59
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	24 60       	ori	r18, 0x04	; 4
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
  cbi(CTRL,EN); //disable
     94c:	8b e3       	ldi	r24, 0x3B	; 59
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	2b e3       	ldi	r18, 0x3B	; 59
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	2b 7f       	andi	r18, 0xFB	; 251
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
}
     95e:	00 00       	nop
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <wait_LCD>:

void wait_LCD(void)
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	1f 92       	push	r1
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
  cbi(CTRL,RW); //ready for next step
  DDR_DATA=0xFF;//Ready to Out
  #else
  char temp_val;
  while(1){
    cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
     972:	8b e3       	ldi	r24, 0x3B	; 59
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	2b e3       	ldi	r18, 0x3B	; 59
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	2e 7f       	andi	r18, 0xFE	; 254
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
    sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
     984:	8b e3       	ldi	r24, 0x3B	; 59
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2b e3       	ldi	r18, 0x3B	; 59
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	f9 01       	movw	r30, r18
     98e:	20 81       	ld	r18, Z
     990:	22 60       	ori	r18, 0x02	; 2
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
    temp_val=Read2Nib();
     996:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Read2Nib>
     99a:	89 83       	std	Y+1, r24	; 0x01
    if (bit_is_clear(temp_val,7)) break;
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	88 23       	and	r24, r24
     9a6:	0c f4       	brge	.+2      	; 0x9aa <wait_LCD+0x42>
  }
     9a8:	e4 cf       	rjmp	.-56     	; 0x972 <wait_LCD+0xa>
  char temp_val;
  while(1){
    cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
    sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
    temp_val=Read2Nib();
    if (bit_is_clear(temp_val,7)) break;
     9aa:	00 00       	nop
  }
  cbi(CTRL,RW); //ready for next step
     9ac:	8b e3       	ldi	r24, 0x3B	; 59
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2b e3       	ldi	r18, 0x3B	; 59
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	2d 7f       	andi	r18, 0xFD	; 253
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
  DDR_DATA=0xFF;//Ready to Out
     9be:	8a e3       	ldi	r24, 0x3A	; 58
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	2f ef       	ldi	r18, 0xFF	; 255
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
  #endif

  //_delay_ms(1);

}
     9c8:	00 00       	nop
     9ca:	0f 90       	pop	r0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <init_LCD>:

void init_LCD(void)
{
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
  DDR_CTRL=0xFF;
     9da:	8a e3       	ldi	r24, 0x3A	; 58
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	2f ef       	ldi	r18, 0xFF	; 255
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
  DDR_DATA=0xFF;
     9e4:	8a e3       	ldi	r24, 0x3A	; 58
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
  //Function set------------------------------------------------------------------------------
  cbi(CTRL,RS);   // the following data is COMMAND
     9ee:	8b e3       	ldi	r24, 0x3B	; 59
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	2b e3       	ldi	r18, 0x3B	; 59
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	f9 01       	movw	r30, r18
     9f8:	20 81       	ld	r18, Z
     9fa:	2e 7f       	andi	r18, 0xFE	; 254
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
  cbi(CTRL, RW); // AVR->LCD
     a00:	8b e3       	ldi	r24, 0x3B	; 59
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	2b e3       	ldi	r18, 0x3B	; 59
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	f9 01       	movw	r30, r18
     a0a:	20 81       	ld	r18, Z
     a0c:	2d 7f       	andi	r18, 0xFD	; 253
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
  cbi(CTRL, EN);
     a12:	8b e3       	ldi	r24, 0x3B	; 59
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	2b e3       	ldi	r18, 0x3B	; 59
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	2b 7f       	andi	r18, 0xFB	; 251
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
  #ifdef LCD8BIT
  Write8Bit(0x38);
  wait_LCD();
  #else
  sbi(CTRL,EN); //enable
     a24:	8b e3       	ldi	r24, 0x3B	; 59
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	2b e3       	ldi	r18, 0x3B	; 59
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	24 60       	ori	r18, 0x04	; 4
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
  sbi(DATA_O, 5);
     a36:	8b e3       	ldi	r24, 0x3B	; 59
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	2b e3       	ldi	r18, 0x3B	; 59
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	f9 01       	movw	r30, r18
     a40:	20 81       	ld	r18, Z
     a42:	20 62       	ori	r18, 0x20	; 32
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
  cbi(CTRL,EN); //disable
     a48:	8b e3       	ldi	r24, 0x3B	; 59
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	2b e3       	ldi	r18, 0x3B	; 59
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	2b 7f       	andi	r18, 0xFB	; 251
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
  wait_LCD();
     a5a:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>
  Write2Nib(0x28);//
     a5e:	88 e2       	ldi	r24, 0x28	; 40
     a60:	0e 94 3e 04 	call	0x87c	; 0x87c <Write2Nib>
  wait_LCD();
     a64:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>
  #endif
  //Display control-------------------------------------------------------------------------
  cbi(CTRL,RS); // the following data is COMMAND
     a68:	8b e3       	ldi	r24, 0x3B	; 59
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2b e3       	ldi	r18, 0x3B	; 59
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	2e 7f       	andi	r18, 0xFE	; 254
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
  #ifdef LCD8BIT
  Write8Bit(0x0E);
  wait_LCD();
  #else
  Write2Nib(0x0E);
     a7a:	8e e0       	ldi	r24, 0x0E	; 14
     a7c:	0e 94 3e 04 	call	0x87c	; 0x87c <Write2Nib>
  wait_LCD();
     a80:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>
  #endif
  //Entry mode set------------------------------------------------------------------------
  cbi(CTRL,RS); // the following data is COMMAND
     a84:	8b e3       	ldi	r24, 0x3B	; 59
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	2b e3       	ldi	r18, 0x3B	; 59
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	f9 01       	movw	r30, r18
     a8e:	20 81       	ld	r18, Z
     a90:	2e 7f       	andi	r18, 0xFE	; 254
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
  #ifdef LCD8BIT
  Write8Bit(0x06);
  wait_LCD();
  #else
  Write2Nib(0x06);
     a96:	86 e0       	ldi	r24, 0x06	; 6
     a98:	0e 94 3e 04 	call	0x87c	; 0x87c <Write2Nib>
  wait_LCD();
     a9c:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>
  #endif
}
     aa0:	00 00       	nop
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <home_LCD>:

void home_LCD(void)
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
  cbi(CTRL,RS); // the following data is COMMAND
     ab0:	8b e3       	ldi	r24, 0x3B	; 59
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2b e3       	ldi	r18, 0x3B	; 59
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	2e 7f       	andi	r18, 0xFE	; 254
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
  #ifdef LCD8BIT
  Write8Bit(0x02);
  wait_LCD();
  #else
  Write2Nib(0x02);
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	0e 94 3e 04 	call	0x87c	; 0x87c <Write2Nib>
  wait_LCD();
     ac8:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>
  #endif
}
     acc:	00 00       	nop
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <move_LCD>:

/*
 *  Move the cursor to the specific local on the LCD
 */
void move_LCD(uint8_t y, uint8_t x)
{
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	00 d0       	rcall	.+0      	; 0xada <move_LCD+0x6>
     ada:	1f 92       	push	r1
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	8a 83       	std	Y+2, r24	; 0x02
     ae2:	6b 83       	std	Y+3, r22	; 0x03
  uint8_t Ad;
  Ad=64*(y-1)+(x-1)+0x80; //
     ae4:	8a 81       	ldd	r24, Y+2	; 0x02
     ae6:	88 2f       	mov	r24, r24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	98 2f       	mov	r25, r24
     aee:	92 95       	swap	r25
     af0:	99 0f       	add	r25, r25
     af2:	99 0f       	add	r25, r25
     af4:	90 7c       	andi	r25, 0xC0	; 192
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	89 0f       	add	r24, r25
     afa:	81 58       	subi	r24, 0x81	; 129
     afc:	89 83       	std	Y+1, r24	; 0x01
  cbi(CTRL,RS); // the following data is COMMAND
     afe:	8b e3       	ldi	r24, 0x3B	; 59
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	2b e3       	ldi	r18, 0x3B	; 59
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	f9 01       	movw	r30, r18
     b08:	20 81       	ld	r18, Z
     b0a:	2e 7f       	andi	r18, 0xFE	; 254
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 83       	st	Z, r18
  #ifdef LCD8BIT
  Write8Bit(Ad);
  wait_LCD();
  #else
  Write2Nib(Ad);
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	0e 94 3e 04 	call	0x87c	; 0x87c <Write2Nib>
  wait_LCD();
     b16:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>
  #endif
}
     b1a:	00 00       	nop
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <clr_LCD>:

/*
 *  Clear the LCD
 */
void clr_LCD(void)
{
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
  cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
     b30:	8b e3       	ldi	r24, 0x3B	; 59
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	2b e3       	ldi	r18, 0x3B	; 59
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	f9 01       	movw	r30, r18
     b3a:	20 81       	ld	r18, Z
     b3c:	2e 7f       	andi	r18, 0xFE	; 254
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
  #ifdef LCD8BIT
  Write8Bit(0x01);
  wait_LCD();
  #else
  Write2Nib(0x01);
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	0e 94 3e 04 	call	0x87c	; 0x87c <Write2Nib>
  wait_LCD();
     b48:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>

  #endif
}
     b4c:	00 00       	nop
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <putChar_LCD>:

/*
 *  Put char on the LCD
 */
void putChar_LCD(uint8_t chr)
{
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	1f 92       	push	r1
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01
  sbi(CTRL,RS); //this is a normal DATA
     b60:	8b e3       	ldi	r24, 0x3B	; 59
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	2b e3       	ldi	r18, 0x3B	; 59
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	21 60       	ori	r18, 0x01	; 1
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
  #ifdef LCD8BIT
  Write8Bit(chr);
  wait_LCD();
  #else
  Write2Nib(chr);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	0e 94 3e 04 	call	0x87c	; 0x87c <Write2Nib>
  wait_LCD();
     b78:	0e 94 b4 04 	call	0x968	; 0x968 <wait_LCD>
  #endif
}
     b7c:	00 00       	nop
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <putStr_LCD>:

/*
 *  Put string on the LCD
 */
void putStr_LCD(const char* str)
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <putStr_LCD+0x6>
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	9b 83       	std	Y+3, r25	; 0x03
     b94:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char i;
  for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);
     b96:	19 82       	std	Y+1, r1	; 0x01
     b98:	0e c0       	rjmp	.+28     	; 0xbb6 <putStr_LCD+0x30>
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	2a 81       	ldd	r18, Y+2	; 0x02
     ba2:	3b 81       	ldd	r19, Y+3	; 0x03
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	0e 94 aa 05 	call	0xb54	; 0xb54 <putChar_LCD>
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	8f 5f       	subi	r24, 0xFF	; 255
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	2a 81       	ldd	r18, Y+2	; 0x02
     bbe:	3b 81       	ldd	r19, Y+3	; 0x03
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	fc 01       	movw	r30, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	88 23       	and	r24, r24
     bca:	39 f7       	brne	.-50     	; 0xb9a <putStr_LCD+0x14>
}
     bcc:	00 00       	nop
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <printf_LCD>:

/*
 *  Print standard C printf format string on the LCD
 */
void printf_LCD(const char *format, ...)
{
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <printf_LCD+0x6>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
  static char lcd_buffer[LCD_NO_COLS + 1];
  va_list args;

  va_start(args, format);
     be4:	ce 01       	movw	r24, r28
     be6:	09 96       	adiw	r24, 0x09	; 9
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
  vsnprintf(lcd_buffer, LCD_NO_COLS + 1, format, args);
     bec:	29 81       	ldd	r18, Y+1	; 0x01
     bee:	3a 81       	ldd	r19, Y+2	; 0x02
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	98 85       	ldd	r25, Y+8	; 0x08
     bf4:	ac 01       	movw	r20, r24
     bf6:	61 e1       	ldi	r22, 0x11	; 17
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	8d e3       	ldi	r24, 0x3D	; 61
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	0e 94 71 08 	call	0x10e2	; 0x10e2 <vsnprintf>
  va_end(args);

  putStr_LCD(lcd_buffer);
     c02:	8d e3       	ldi	r24, 0x3D	; 61
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 c3 05 	call	0xb86	; 0xb86 <putStr_LCD>
}
     c0a:	00 00       	nop
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <__divmodhi4>:
     c16:	97 fb       	bst	r25, 7
     c18:	07 2e       	mov	r0, r23
     c1a:	16 f4       	brtc	.+4      	; 0xc20 <__divmodhi4+0xa>
     c1c:	00 94       	com	r0
     c1e:	07 d0       	rcall	.+14     	; 0xc2e <__divmodhi4_neg1>
     c20:	77 fd       	sbrc	r23, 7
     c22:	09 d0       	rcall	.+18     	; 0xc36 <__divmodhi4_neg2>
     c24:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__udivmodhi4>
     c28:	07 fc       	sbrc	r0, 7
     c2a:	05 d0       	rcall	.+10     	; 0xc36 <__divmodhi4_neg2>
     c2c:	3e f4       	brtc	.+14     	; 0xc3c <__divmodhi4_exit>

00000c2e <__divmodhi4_neg1>:
     c2e:	90 95       	com	r25
     c30:	81 95       	neg	r24
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	08 95       	ret

00000c36 <__divmodhi4_neg2>:
     c36:	70 95       	com	r23
     c38:	61 95       	neg	r22
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c3c <__divmodhi4_exit>:
     c3c:	08 95       	ret

00000c3e <__udivmodhi4>:
     c3e:	aa 1b       	sub	r26, r26
     c40:	bb 1b       	sub	r27, r27
     c42:	51 e1       	ldi	r21, 0x11	; 17
     c44:	07 c0       	rjmp	.+14     	; 0xc54 <__udivmodhi4_ep>

00000c46 <__udivmodhi4_loop>:
     c46:	aa 1f       	adc	r26, r26
     c48:	bb 1f       	adc	r27, r27
     c4a:	a6 17       	cp	r26, r22
     c4c:	b7 07       	cpc	r27, r23
     c4e:	10 f0       	brcs	.+4      	; 0xc54 <__udivmodhi4_ep>
     c50:	a6 1b       	sub	r26, r22
     c52:	b7 0b       	sbc	r27, r23

00000c54 <__udivmodhi4_ep>:
     c54:	88 1f       	adc	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	5a 95       	dec	r21
     c5a:	a9 f7       	brne	.-22     	; 0xc46 <__udivmodhi4_loop>
     c5c:	80 95       	com	r24
     c5e:	90 95       	com	r25
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	08 95       	ret

00000c66 <__subsf3>:
     c66:	50 58       	subi	r21, 0x80	; 128

00000c68 <__addsf3>:
     c68:	bb 27       	eor	r27, r27
     c6a:	aa 27       	eor	r26, r26
     c6c:	0e 94 4b 06 	call	0xc96	; 0xc96 <__addsf3x>
     c70:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_round>
     c74:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_pscA>
     c78:	38 f0       	brcs	.+14     	; 0xc88 <__addsf3+0x20>
     c7a:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_pscB>
     c7e:	20 f0       	brcs	.+8      	; 0xc88 <__addsf3+0x20>
     c80:	39 f4       	brne	.+14     	; 0xc90 <__addsf3+0x28>
     c82:	9f 3f       	cpi	r25, 0xFF	; 255
     c84:	19 f4       	brne	.+6      	; 0xc8c <__addsf3+0x24>
     c86:	26 f4       	brtc	.+8      	; 0xc90 <__addsf3+0x28>
     c88:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_nan>
     c8c:	0e f4       	brtc	.+2      	; 0xc90 <__addsf3+0x28>
     c8e:	e0 95       	com	r30
     c90:	e7 fb       	bst	r30, 7
     c92:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_inf>

00000c96 <__addsf3x>:
     c96:	e9 2f       	mov	r30, r25
     c98:	0e 94 d6 07 	call	0xfac	; 0xfac <__fp_split3>
     c9c:	58 f3       	brcs	.-42     	; 0xc74 <__addsf3+0xc>
     c9e:	ba 17       	cp	r27, r26
     ca0:	62 07       	cpc	r22, r18
     ca2:	73 07       	cpc	r23, r19
     ca4:	84 07       	cpc	r24, r20
     ca6:	95 07       	cpc	r25, r21
     ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__addsf3x+0x1c>
     caa:	79 f4       	brne	.+30     	; 0xcca <__addsf3x+0x34>
     cac:	a6 f5       	brtc	.+104    	; 0xd16 <__addsf3x+0x80>
     cae:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_zero>
     cb2:	0e f4       	brtc	.+2      	; 0xcb6 <__addsf3x+0x20>
     cb4:	e0 95       	com	r30
     cb6:	0b 2e       	mov	r0, r27
     cb8:	ba 2f       	mov	r27, r26
     cba:	a0 2d       	mov	r26, r0
     cbc:	0b 01       	movw	r0, r22
     cbe:	b9 01       	movw	r22, r18
     cc0:	90 01       	movw	r18, r0
     cc2:	0c 01       	movw	r0, r24
     cc4:	ca 01       	movw	r24, r20
     cc6:	a0 01       	movw	r20, r0
     cc8:	11 24       	eor	r1, r1
     cca:	ff 27       	eor	r31, r31
     ccc:	59 1b       	sub	r21, r25
     cce:	99 f0       	breq	.+38     	; 0xcf6 <__addsf3x+0x60>
     cd0:	59 3f       	cpi	r21, 0xF9	; 249
     cd2:	50 f4       	brcc	.+20     	; 0xce8 <__addsf3x+0x52>
     cd4:	50 3e       	cpi	r21, 0xE0	; 224
     cd6:	68 f1       	brcs	.+90     	; 0xd32 <__addsf3x+0x9c>
     cd8:	1a 16       	cp	r1, r26
     cda:	f0 40       	sbci	r31, 0x00	; 0
     cdc:	a2 2f       	mov	r26, r18
     cde:	23 2f       	mov	r18, r19
     ce0:	34 2f       	mov	r19, r20
     ce2:	44 27       	eor	r20, r20
     ce4:	58 5f       	subi	r21, 0xF8	; 248
     ce6:	f3 cf       	rjmp	.-26     	; 0xcce <__addsf3x+0x38>
     ce8:	46 95       	lsr	r20
     cea:	37 95       	ror	r19
     cec:	27 95       	ror	r18
     cee:	a7 95       	ror	r26
     cf0:	f0 40       	sbci	r31, 0x00	; 0
     cf2:	53 95       	inc	r21
     cf4:	c9 f7       	brne	.-14     	; 0xce8 <__addsf3x+0x52>
     cf6:	7e f4       	brtc	.+30     	; 0xd16 <__addsf3x+0x80>
     cf8:	1f 16       	cp	r1, r31
     cfa:	ba 0b       	sbc	r27, r26
     cfc:	62 0b       	sbc	r22, r18
     cfe:	73 0b       	sbc	r23, r19
     d00:	84 0b       	sbc	r24, r20
     d02:	ba f0       	brmi	.+46     	; 0xd32 <__addsf3x+0x9c>
     d04:	91 50       	subi	r25, 0x01	; 1
     d06:	a1 f0       	breq	.+40     	; 0xd30 <__addsf3x+0x9a>
     d08:	ff 0f       	add	r31, r31
     d0a:	bb 1f       	adc	r27, r27
     d0c:	66 1f       	adc	r22, r22
     d0e:	77 1f       	adc	r23, r23
     d10:	88 1f       	adc	r24, r24
     d12:	c2 f7       	brpl	.-16     	; 0xd04 <__addsf3x+0x6e>
     d14:	0e c0       	rjmp	.+28     	; 0xd32 <__addsf3x+0x9c>
     d16:	ba 0f       	add	r27, r26
     d18:	62 1f       	adc	r22, r18
     d1a:	73 1f       	adc	r23, r19
     d1c:	84 1f       	adc	r24, r20
     d1e:	48 f4       	brcc	.+18     	; 0xd32 <__addsf3x+0x9c>
     d20:	87 95       	ror	r24
     d22:	77 95       	ror	r23
     d24:	67 95       	ror	r22
     d26:	b7 95       	ror	r27
     d28:	f7 95       	ror	r31
     d2a:	9e 3f       	cpi	r25, 0xFE	; 254
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <__addsf3x+0x9a>
     d2e:	b0 cf       	rjmp	.-160    	; 0xc90 <__addsf3+0x28>
     d30:	93 95       	inc	r25
     d32:	88 0f       	add	r24, r24
     d34:	08 f0       	brcs	.+2      	; 0xd38 <__addsf3x+0xa2>
     d36:	99 27       	eor	r25, r25
     d38:	ee 0f       	add	r30, r30
     d3a:	97 95       	ror	r25
     d3c:	87 95       	ror	r24
     d3e:	08 95       	ret

00000d40 <__cmpsf2>:
     d40:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_cmp>
     d44:	08 f4       	brcc	.+2      	; 0xd48 <__cmpsf2+0x8>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	08 95       	ret

00000d4a <__divsf3>:
     d4a:	0e 94 b9 06 	call	0xd72	; 0xd72 <__divsf3x>
     d4e:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_round>
     d52:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_pscB>
     d56:	58 f0       	brcs	.+22     	; 0xd6e <__divsf3+0x24>
     d58:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_pscA>
     d5c:	40 f0       	brcs	.+16     	; 0xd6e <__divsf3+0x24>
     d5e:	29 f4       	brne	.+10     	; 0xd6a <__divsf3+0x20>
     d60:	5f 3f       	cpi	r21, 0xFF	; 255
     d62:	29 f0       	breq	.+10     	; 0xd6e <__divsf3+0x24>
     d64:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_inf>
     d68:	51 11       	cpse	r21, r1
     d6a:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_szero>
     d6e:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_nan>

00000d72 <__divsf3x>:
     d72:	0e 94 d6 07 	call	0xfac	; 0xfac <__fp_split3>
     d76:	68 f3       	brcs	.-38     	; 0xd52 <__divsf3+0x8>

00000d78 <__divsf3_pse>:
     d78:	99 23       	and	r25, r25
     d7a:	b1 f3       	breq	.-20     	; 0xd68 <__divsf3+0x1e>
     d7c:	55 23       	and	r21, r21
     d7e:	91 f3       	breq	.-28     	; 0xd64 <__divsf3+0x1a>
     d80:	95 1b       	sub	r25, r21
     d82:	55 0b       	sbc	r21, r21
     d84:	bb 27       	eor	r27, r27
     d86:	aa 27       	eor	r26, r26
     d88:	62 17       	cp	r22, r18
     d8a:	73 07       	cpc	r23, r19
     d8c:	84 07       	cpc	r24, r20
     d8e:	38 f0       	brcs	.+14     	; 0xd9e <__divsf3_pse+0x26>
     d90:	9f 5f       	subi	r25, 0xFF	; 255
     d92:	5f 4f       	sbci	r21, 0xFF	; 255
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	44 1f       	adc	r20, r20
     d9a:	aa 1f       	adc	r26, r26
     d9c:	a9 f3       	breq	.-22     	; 0xd88 <__divsf3_pse+0x10>
     d9e:	35 d0       	rcall	.+106    	; 0xe0a <__divsf3_pse+0x92>
     da0:	0e 2e       	mov	r0, r30
     da2:	3a f0       	brmi	.+14     	; 0xdb2 <__divsf3_pse+0x3a>
     da4:	e0 e8       	ldi	r30, 0x80	; 128
     da6:	32 d0       	rcall	.+100    	; 0xe0c <__divsf3_pse+0x94>
     da8:	91 50       	subi	r25, 0x01	; 1
     daa:	50 40       	sbci	r21, 0x00	; 0
     dac:	e6 95       	lsr	r30
     dae:	00 1c       	adc	r0, r0
     db0:	ca f7       	brpl	.-14     	; 0xda4 <__divsf3_pse+0x2c>
     db2:	2b d0       	rcall	.+86     	; 0xe0a <__divsf3_pse+0x92>
     db4:	fe 2f       	mov	r31, r30
     db6:	29 d0       	rcall	.+82     	; 0xe0a <__divsf3_pse+0x92>
     db8:	66 0f       	add	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	bb 1f       	adc	r27, r27
     dc0:	26 17       	cp	r18, r22
     dc2:	37 07       	cpc	r19, r23
     dc4:	48 07       	cpc	r20, r24
     dc6:	ab 07       	cpc	r26, r27
     dc8:	b0 e8       	ldi	r27, 0x80	; 128
     dca:	09 f0       	breq	.+2      	; 0xdce <__divsf3_pse+0x56>
     dcc:	bb 0b       	sbc	r27, r27
     dce:	80 2d       	mov	r24, r0
     dd0:	bf 01       	movw	r22, r30
     dd2:	ff 27       	eor	r31, r31
     dd4:	93 58       	subi	r25, 0x83	; 131
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	3a f0       	brmi	.+14     	; 0xde8 <__divsf3_pse+0x70>
     dda:	9e 3f       	cpi	r25, 0xFE	; 254
     ddc:	51 05       	cpc	r21, r1
     dde:	78 f0       	brcs	.+30     	; 0xdfe <__divsf3_pse+0x86>
     de0:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_inf>
     de4:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_szero>
     de8:	5f 3f       	cpi	r21, 0xFF	; 255
     dea:	e4 f3       	brlt	.-8      	; 0xde4 <__divsf3_pse+0x6c>
     dec:	98 3e       	cpi	r25, 0xE8	; 232
     dee:	d4 f3       	brlt	.-12     	; 0xde4 <__divsf3_pse+0x6c>
     df0:	86 95       	lsr	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b7 95       	ror	r27
     df8:	f7 95       	ror	r31
     dfa:	9f 5f       	subi	r25, 0xFF	; 255
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <__divsf3_pse+0x78>
     dfe:	88 0f       	add	r24, r24
     e00:	91 1d       	adc	r25, r1
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	97 f9       	bld	r25, 7
     e08:	08 95       	ret
     e0a:	e1 e0       	ldi	r30, 0x01	; 1
     e0c:	66 0f       	add	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	88 1f       	adc	r24, r24
     e12:	bb 1f       	adc	r27, r27
     e14:	62 17       	cp	r22, r18
     e16:	73 07       	cpc	r23, r19
     e18:	84 07       	cpc	r24, r20
     e1a:	ba 07       	cpc	r27, r26
     e1c:	20 f0       	brcs	.+8      	; 0xe26 <__divsf3_pse+0xae>
     e1e:	62 1b       	sub	r22, r18
     e20:	73 0b       	sbc	r23, r19
     e22:	84 0b       	sbc	r24, r20
     e24:	ba 0b       	sbc	r27, r26
     e26:	ee 1f       	adc	r30, r30
     e28:	88 f7       	brcc	.-30     	; 0xe0c <__divsf3_pse+0x94>
     e2a:	e0 95       	com	r30
     e2c:	08 95       	ret

00000e2e <__fixsfsi>:
     e2e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixunssfsi>
     e32:	68 94       	set
     e34:	b1 11       	cpse	r27, r1
     e36:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_szero>
     e3a:	08 95       	ret

00000e3c <__fixunssfsi>:
     e3c:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fp_splitA>
     e40:	88 f0       	brcs	.+34     	; 0xe64 <__fixunssfsi+0x28>
     e42:	9f 57       	subi	r25, 0x7F	; 127
     e44:	98 f0       	brcs	.+38     	; 0xe6c <__fixunssfsi+0x30>
     e46:	b9 2f       	mov	r27, r25
     e48:	99 27       	eor	r25, r25
     e4a:	b7 51       	subi	r27, 0x17	; 23
     e4c:	b0 f0       	brcs	.+44     	; 0xe7a <__fixunssfsi+0x3e>
     e4e:	e1 f0       	breq	.+56     	; 0xe88 <__fixunssfsi+0x4c>
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	1a f0       	brmi	.+6      	; 0xe60 <__fixunssfsi+0x24>
     e5a:	ba 95       	dec	r27
     e5c:	c9 f7       	brne	.-14     	; 0xe50 <__fixunssfsi+0x14>
     e5e:	14 c0       	rjmp	.+40     	; 0xe88 <__fixunssfsi+0x4c>
     e60:	b1 30       	cpi	r27, 0x01	; 1
     e62:	91 f0       	breq	.+36     	; 0xe88 <__fixunssfsi+0x4c>
     e64:	0e 94 f8 07 	call	0xff0	; 0xff0 <__fp_zero>
     e68:	b1 e0       	ldi	r27, 0x01	; 1
     e6a:	08 95       	ret
     e6c:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_zero>
     e70:	67 2f       	mov	r22, r23
     e72:	78 2f       	mov	r23, r24
     e74:	88 27       	eor	r24, r24
     e76:	b8 5f       	subi	r27, 0xF8	; 248
     e78:	39 f0       	breq	.+14     	; 0xe88 <__fixunssfsi+0x4c>
     e7a:	b9 3f       	cpi	r27, 0xF9	; 249
     e7c:	cc f3       	brlt	.-14     	; 0xe70 <__fixunssfsi+0x34>
     e7e:	86 95       	lsr	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b3 95       	inc	r27
     e86:	d9 f7       	brne	.-10     	; 0xe7e <__fixunssfsi+0x42>
     e88:	3e f4       	brtc	.+14     	; 0xe98 <__fixunssfsi+0x5c>
     e8a:	90 95       	com	r25
     e8c:	80 95       	com	r24
     e8e:	70 95       	com	r23
     e90:	61 95       	neg	r22
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	08 95       	ret

00000e9a <__floatunsisf>:
     e9a:	e8 94       	clt
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <__floatsisf+0x12>

00000e9e <__floatsisf>:
     e9e:	97 fb       	bst	r25, 7
     ea0:	3e f4       	brtc	.+14     	; 0xeb0 <__floatsisf+0x12>
     ea2:	90 95       	com	r25
     ea4:	80 95       	com	r24
     ea6:	70 95       	com	r23
     ea8:	61 95       	neg	r22
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	8f 4f       	sbci	r24, 0xFF	; 255
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	99 23       	and	r25, r25
     eb2:	a9 f0       	breq	.+42     	; 0xede <__floatsisf+0x40>
     eb4:	f9 2f       	mov	r31, r25
     eb6:	96 e9       	ldi	r25, 0x96	; 150
     eb8:	bb 27       	eor	r27, r27
     eba:	93 95       	inc	r25
     ebc:	f6 95       	lsr	r31
     ebe:	87 95       	ror	r24
     ec0:	77 95       	ror	r23
     ec2:	67 95       	ror	r22
     ec4:	b7 95       	ror	r27
     ec6:	f1 11       	cpse	r31, r1
     ec8:	f8 cf       	rjmp	.-16     	; 0xeba <__floatsisf+0x1c>
     eca:	fa f4       	brpl	.+62     	; 0xf0a <__floatsisf+0x6c>
     ecc:	bb 0f       	add	r27, r27
     ece:	11 f4       	brne	.+4      	; 0xed4 <__floatsisf+0x36>
     ed0:	60 ff       	sbrs	r22, 0
     ed2:	1b c0       	rjmp	.+54     	; 0xf0a <__floatsisf+0x6c>
     ed4:	6f 5f       	subi	r22, 0xFF	; 255
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	8f 4f       	sbci	r24, 0xFF	; 255
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	16 c0       	rjmp	.+44     	; 0xf0a <__floatsisf+0x6c>
     ede:	88 23       	and	r24, r24
     ee0:	11 f0       	breq	.+4      	; 0xee6 <__floatsisf+0x48>
     ee2:	96 e9       	ldi	r25, 0x96	; 150
     ee4:	11 c0       	rjmp	.+34     	; 0xf08 <__floatsisf+0x6a>
     ee6:	77 23       	and	r23, r23
     ee8:	21 f0       	breq	.+8      	; 0xef2 <__floatsisf+0x54>
     eea:	9e e8       	ldi	r25, 0x8E	; 142
     eec:	87 2f       	mov	r24, r23
     eee:	76 2f       	mov	r23, r22
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <__floatsisf+0x5e>
     ef2:	66 23       	and	r22, r22
     ef4:	71 f0       	breq	.+28     	; 0xf12 <__floatsisf+0x74>
     ef6:	96 e8       	ldi	r25, 0x86	; 134
     ef8:	86 2f       	mov	r24, r22
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	2a f0       	brmi	.+10     	; 0xf0a <__floatsisf+0x6c>
     f00:	9a 95       	dec	r25
     f02:	66 0f       	add	r22, r22
     f04:	77 1f       	adc	r23, r23
     f06:	88 1f       	adc	r24, r24
     f08:	da f7       	brpl	.-10     	; 0xf00 <__floatsisf+0x62>
     f0a:	88 0f       	add	r24, r24
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	97 f9       	bld	r25, 7
     f12:	08 95       	ret

00000f14 <__fp_cmp>:
     f14:	99 0f       	add	r25, r25
     f16:	00 08       	sbc	r0, r0
     f18:	55 0f       	add	r21, r21
     f1a:	aa 0b       	sbc	r26, r26
     f1c:	e0 e8       	ldi	r30, 0x80	; 128
     f1e:	fe ef       	ldi	r31, 0xFE	; 254
     f20:	16 16       	cp	r1, r22
     f22:	17 06       	cpc	r1, r23
     f24:	e8 07       	cpc	r30, r24
     f26:	f9 07       	cpc	r31, r25
     f28:	c0 f0       	brcs	.+48     	; 0xf5a <__fp_cmp+0x46>
     f2a:	12 16       	cp	r1, r18
     f2c:	13 06       	cpc	r1, r19
     f2e:	e4 07       	cpc	r30, r20
     f30:	f5 07       	cpc	r31, r21
     f32:	98 f0       	brcs	.+38     	; 0xf5a <__fp_cmp+0x46>
     f34:	62 1b       	sub	r22, r18
     f36:	73 0b       	sbc	r23, r19
     f38:	84 0b       	sbc	r24, r20
     f3a:	95 0b       	sbc	r25, r21
     f3c:	39 f4       	brne	.+14     	; 0xf4c <__fp_cmp+0x38>
     f3e:	0a 26       	eor	r0, r26
     f40:	61 f0       	breq	.+24     	; 0xf5a <__fp_cmp+0x46>
     f42:	23 2b       	or	r18, r19
     f44:	24 2b       	or	r18, r20
     f46:	25 2b       	or	r18, r21
     f48:	21 f4       	brne	.+8      	; 0xf52 <__fp_cmp+0x3e>
     f4a:	08 95       	ret
     f4c:	0a 26       	eor	r0, r26
     f4e:	09 f4       	brne	.+2      	; 0xf52 <__fp_cmp+0x3e>
     f50:	a1 40       	sbci	r26, 0x01	; 1
     f52:	a6 95       	lsr	r26
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	81 1d       	adc	r24, r1
     f58:	81 1d       	adc	r24, r1
     f5a:	08 95       	ret

00000f5c <__fp_inf>:
     f5c:	97 f9       	bld	r25, 7
     f5e:	9f 67       	ori	r25, 0x7F	; 127
     f60:	80 e8       	ldi	r24, 0x80	; 128
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	08 95       	ret

00000f68 <__fp_nan>:
     f68:	9f ef       	ldi	r25, 0xFF	; 255
     f6a:	80 ec       	ldi	r24, 0xC0	; 192
     f6c:	08 95       	ret

00000f6e <__fp_pscA>:
     f6e:	00 24       	eor	r0, r0
     f70:	0a 94       	dec	r0
     f72:	16 16       	cp	r1, r22
     f74:	17 06       	cpc	r1, r23
     f76:	18 06       	cpc	r1, r24
     f78:	09 06       	cpc	r0, r25
     f7a:	08 95       	ret

00000f7c <__fp_pscB>:
     f7c:	00 24       	eor	r0, r0
     f7e:	0a 94       	dec	r0
     f80:	12 16       	cp	r1, r18
     f82:	13 06       	cpc	r1, r19
     f84:	14 06       	cpc	r1, r20
     f86:	05 06       	cpc	r0, r21
     f88:	08 95       	ret

00000f8a <__fp_round>:
     f8a:	09 2e       	mov	r0, r25
     f8c:	03 94       	inc	r0
     f8e:	00 0c       	add	r0, r0
     f90:	11 f4       	brne	.+4      	; 0xf96 <__fp_round+0xc>
     f92:	88 23       	and	r24, r24
     f94:	52 f0       	brmi	.+20     	; 0xfaa <__fp_round+0x20>
     f96:	bb 0f       	add	r27, r27
     f98:	40 f4       	brcc	.+16     	; 0xfaa <__fp_round+0x20>
     f9a:	bf 2b       	or	r27, r31
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <__fp_round+0x18>
     f9e:	60 ff       	sbrs	r22, 0
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__fp_round+0x20>
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	08 95       	ret

00000fac <__fp_split3>:
     fac:	57 fd       	sbrc	r21, 7
     fae:	90 58       	subi	r25, 0x80	; 128
     fb0:	44 0f       	add	r20, r20
     fb2:	55 1f       	adc	r21, r21
     fb4:	59 f0       	breq	.+22     	; 0xfcc <__fp_splitA+0x10>
     fb6:	5f 3f       	cpi	r21, 0xFF	; 255
     fb8:	71 f0       	breq	.+28     	; 0xfd6 <__fp_splitA+0x1a>
     fba:	47 95       	ror	r20

00000fbc <__fp_splitA>:
     fbc:	88 0f       	add	r24, r24
     fbe:	97 fb       	bst	r25, 7
     fc0:	99 1f       	adc	r25, r25
     fc2:	61 f0       	breq	.+24     	; 0xfdc <__fp_splitA+0x20>
     fc4:	9f 3f       	cpi	r25, 0xFF	; 255
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <__fp_splitA+0x2a>
     fc8:	87 95       	ror	r24
     fca:	08 95       	ret
     fcc:	12 16       	cp	r1, r18
     fce:	13 06       	cpc	r1, r19
     fd0:	14 06       	cpc	r1, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	f2 cf       	rjmp	.-28     	; 0xfba <__fp_split3+0xe>
     fd6:	46 95       	lsr	r20
     fd8:	f1 df       	rcall	.-30     	; 0xfbc <__fp_splitA>
     fda:	08 c0       	rjmp	.+16     	; 0xfec <__fp_splitA+0x30>
     fdc:	16 16       	cp	r1, r22
     fde:	17 06       	cpc	r1, r23
     fe0:	18 06       	cpc	r1, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	f1 cf       	rjmp	.-30     	; 0xfc8 <__fp_splitA+0xc>
     fe6:	86 95       	lsr	r24
     fe8:	71 05       	cpc	r23, r1
     fea:	61 05       	cpc	r22, r1
     fec:	08 94       	sec
     fee:	08 95       	ret

00000ff0 <__fp_zero>:
     ff0:	e8 94       	clt

00000ff2 <__fp_szero>:
     ff2:	bb 27       	eor	r27, r27
     ff4:	66 27       	eor	r22, r22
     ff6:	77 27       	eor	r23, r23
     ff8:	cb 01       	movw	r24, r22
     ffa:	97 f9       	bld	r25, 7
     ffc:	08 95       	ret

00000ffe <__gesf2>:
     ffe:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_cmp>
    1002:	08 f4       	brcc	.+2      	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	08 95       	ret

00001008 <__mulsf3>:
    1008:	0e 94 17 08 	call	0x102e	; 0x102e <__mulsf3x>
    100c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_round>
    1010:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_pscA>
    1014:	38 f0       	brcs	.+14     	; 0x1024 <__mulsf3+0x1c>
    1016:	0e 94 be 07 	call	0xf7c	; 0xf7c <__fp_pscB>
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__mulsf3+0x1c>
    101c:	95 23       	and	r25, r21
    101e:	11 f0       	breq	.+4      	; 0x1024 <__mulsf3+0x1c>
    1020:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_inf>
    1024:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_nan>
    1028:	11 24       	eor	r1, r1
    102a:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_szero>

0000102e <__mulsf3x>:
    102e:	0e 94 d6 07 	call	0xfac	; 0xfac <__fp_split3>
    1032:	70 f3       	brcs	.-36     	; 0x1010 <__mulsf3+0x8>

00001034 <__mulsf3_pse>:
    1034:	95 9f       	mul	r25, r21
    1036:	c1 f3       	breq	.-16     	; 0x1028 <__mulsf3+0x20>
    1038:	95 0f       	add	r25, r21
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	55 1f       	adc	r21, r21
    103e:	62 9f       	mul	r22, r18
    1040:	f0 01       	movw	r30, r0
    1042:	72 9f       	mul	r23, r18
    1044:	bb 27       	eor	r27, r27
    1046:	f0 0d       	add	r31, r0
    1048:	b1 1d       	adc	r27, r1
    104a:	63 9f       	mul	r22, r19
    104c:	aa 27       	eor	r26, r26
    104e:	f0 0d       	add	r31, r0
    1050:	b1 1d       	adc	r27, r1
    1052:	aa 1f       	adc	r26, r26
    1054:	64 9f       	mul	r22, r20
    1056:	66 27       	eor	r22, r22
    1058:	b0 0d       	add	r27, r0
    105a:	a1 1d       	adc	r26, r1
    105c:	66 1f       	adc	r22, r22
    105e:	82 9f       	mul	r24, r18
    1060:	22 27       	eor	r18, r18
    1062:	b0 0d       	add	r27, r0
    1064:	a1 1d       	adc	r26, r1
    1066:	62 1f       	adc	r22, r18
    1068:	73 9f       	mul	r23, r19
    106a:	b0 0d       	add	r27, r0
    106c:	a1 1d       	adc	r26, r1
    106e:	62 1f       	adc	r22, r18
    1070:	83 9f       	mul	r24, r19
    1072:	a0 0d       	add	r26, r0
    1074:	61 1d       	adc	r22, r1
    1076:	22 1f       	adc	r18, r18
    1078:	74 9f       	mul	r23, r20
    107a:	33 27       	eor	r19, r19
    107c:	a0 0d       	add	r26, r0
    107e:	61 1d       	adc	r22, r1
    1080:	23 1f       	adc	r18, r19
    1082:	84 9f       	mul	r24, r20
    1084:	60 0d       	add	r22, r0
    1086:	21 1d       	adc	r18, r1
    1088:	82 2f       	mov	r24, r18
    108a:	76 2f       	mov	r23, r22
    108c:	6a 2f       	mov	r22, r26
    108e:	11 24       	eor	r1, r1
    1090:	9f 57       	subi	r25, 0x7F	; 127
    1092:	50 40       	sbci	r21, 0x00	; 0
    1094:	9a f0       	brmi	.+38     	; 0x10bc <__mulsf3_pse+0x88>
    1096:	f1 f0       	breq	.+60     	; 0x10d4 <__mulsf3_pse+0xa0>
    1098:	88 23       	and	r24, r24
    109a:	4a f0       	brmi	.+18     	; 0x10ae <__mulsf3_pse+0x7a>
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	bb 1f       	adc	r27, r27
    10a2:	66 1f       	adc	r22, r22
    10a4:	77 1f       	adc	r23, r23
    10a6:	88 1f       	adc	r24, r24
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	50 40       	sbci	r21, 0x00	; 0
    10ac:	a9 f7       	brne	.-22     	; 0x1098 <__mulsf3_pse+0x64>
    10ae:	9e 3f       	cpi	r25, 0xFE	; 254
    10b0:	51 05       	cpc	r21, r1
    10b2:	80 f0       	brcs	.+32     	; 0x10d4 <__mulsf3_pse+0xa0>
    10b4:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_inf>
    10b8:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_szero>
    10bc:	5f 3f       	cpi	r21, 0xFF	; 255
    10be:	e4 f3       	brlt	.-8      	; 0x10b8 <__mulsf3_pse+0x84>
    10c0:	98 3e       	cpi	r25, 0xE8	; 232
    10c2:	d4 f3       	brlt	.-12     	; 0x10b8 <__mulsf3_pse+0x84>
    10c4:	86 95       	lsr	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	e7 95       	ror	r30
    10d0:	9f 5f       	subi	r25, 0xFF	; 255
    10d2:	c1 f7       	brne	.-16     	; 0x10c4 <__mulsf3_pse+0x90>
    10d4:	fe 2b       	or	r31, r30
    10d6:	88 0f       	add	r24, r24
    10d8:	91 1d       	adc	r25, r1
    10da:	96 95       	lsr	r25
    10dc:	87 95       	ror	r24
    10de:	97 f9       	bld	r25, 7
    10e0:	08 95       	ret

000010e2 <vsnprintf>:
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	2e 97       	sbiw	r28, 0x0e	; 14
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	8c 01       	movw	r16, r24
    10fc:	fa 01       	movw	r30, r20
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	8c 83       	std	Y+4, r24	; 0x04
    1102:	1a 83       	std	Y+2, r17	; 0x02
    1104:	09 83       	std	Y+1, r16	; 0x01
    1106:	77 ff       	sbrs	r23, 7
    1108:	02 c0       	rjmp	.+4      	; 0x110e <__stack+0xf>
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e8       	ldi	r23, 0x80	; 128
    110e:	cb 01       	movw	r24, r22
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	a9 01       	movw	r20, r18
    1118:	bf 01       	movw	r22, r30
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 aa 08 	call	0x1154	; 0x1154 <vfprintf>
    1122:	4d 81       	ldd	r20, Y+5	; 0x05
    1124:	5e 81       	ldd	r21, Y+6	; 0x06
    1126:	57 fd       	sbrc	r21, 7
    1128:	0a c0       	rjmp	.+20     	; 0x113e <__stack+0x3f>
    112a:	2f 81       	ldd	r18, Y+7	; 0x07
    112c:	38 85       	ldd	r19, Y+8	; 0x08
    112e:	42 17       	cp	r20, r18
    1130:	53 07       	cpc	r21, r19
    1132:	0c f4       	brge	.+2      	; 0x1136 <__stack+0x37>
    1134:	9a 01       	movw	r18, r20
    1136:	f8 01       	movw	r30, r16
    1138:	e2 0f       	add	r30, r18
    113a:	f3 1f       	adc	r31, r19
    113c:	10 82       	st	Z, r1
    113e:	2e 96       	adiw	r28, 0x0e	; 14
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	08 95       	ret

00001154 <vfprintf>:
    1154:	2f 92       	push	r2
    1156:	3f 92       	push	r3
    1158:	4f 92       	push	r4
    115a:	5f 92       	push	r5
    115c:	6f 92       	push	r6
    115e:	7f 92       	push	r7
    1160:	8f 92       	push	r8
    1162:	9f 92       	push	r9
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	2b 97       	sbiw	r28, 0x0b	; 11
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	6c 01       	movw	r12, r24
    118a:	7b 01       	movw	r14, r22
    118c:	8a 01       	movw	r16, r20
    118e:	fc 01       	movw	r30, r24
    1190:	17 82       	std	Z+7, r1	; 0x07
    1192:	16 82       	std	Z+6, r1	; 0x06
    1194:	83 81       	ldd	r24, Z+3	; 0x03
    1196:	81 ff       	sbrs	r24, 1
    1198:	cc c1       	rjmp	.+920    	; 0x1532 <vfprintf+0x3de>
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	3c 01       	movw	r6, r24
    11a0:	f6 01       	movw	r30, r12
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	f7 01       	movw	r30, r14
    11a6:	93 fd       	sbrc	r25, 3
    11a8:	85 91       	lpm	r24, Z+
    11aa:	93 ff       	sbrs	r25, 3
    11ac:	81 91       	ld	r24, Z+
    11ae:	7f 01       	movw	r14, r30
    11b0:	88 23       	and	r24, r24
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <vfprintf+0x62>
    11b4:	ba c1       	rjmp	.+884    	; 0x152a <vfprintf+0x3d6>
    11b6:	85 32       	cpi	r24, 0x25	; 37
    11b8:	39 f4       	brne	.+14     	; 0x11c8 <vfprintf+0x74>
    11ba:	93 fd       	sbrc	r25, 3
    11bc:	85 91       	lpm	r24, Z+
    11be:	93 ff       	sbrs	r25, 3
    11c0:	81 91       	ld	r24, Z+
    11c2:	7f 01       	movw	r14, r30
    11c4:	85 32       	cpi	r24, 0x25	; 37
    11c6:	29 f4       	brne	.+10     	; 0x11d2 <vfprintf+0x7e>
    11c8:	b6 01       	movw	r22, r12
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    11d0:	e7 cf       	rjmp	.-50     	; 0x11a0 <vfprintf+0x4c>
    11d2:	91 2c       	mov	r9, r1
    11d4:	21 2c       	mov	r2, r1
    11d6:	31 2c       	mov	r3, r1
    11d8:	ff e1       	ldi	r31, 0x1F	; 31
    11da:	f3 15       	cp	r31, r3
    11dc:	d8 f0       	brcs	.+54     	; 0x1214 <vfprintf+0xc0>
    11de:	8b 32       	cpi	r24, 0x2B	; 43
    11e0:	79 f0       	breq	.+30     	; 0x1200 <vfprintf+0xac>
    11e2:	38 f4       	brcc	.+14     	; 0x11f2 <vfprintf+0x9e>
    11e4:	80 32       	cpi	r24, 0x20	; 32
    11e6:	79 f0       	breq	.+30     	; 0x1206 <vfprintf+0xb2>
    11e8:	83 32       	cpi	r24, 0x23	; 35
    11ea:	a1 f4       	brne	.+40     	; 0x1214 <vfprintf+0xc0>
    11ec:	23 2d       	mov	r18, r3
    11ee:	20 61       	ori	r18, 0x10	; 16
    11f0:	1d c0       	rjmp	.+58     	; 0x122c <vfprintf+0xd8>
    11f2:	8d 32       	cpi	r24, 0x2D	; 45
    11f4:	61 f0       	breq	.+24     	; 0x120e <vfprintf+0xba>
    11f6:	80 33       	cpi	r24, 0x30	; 48
    11f8:	69 f4       	brne	.+26     	; 0x1214 <vfprintf+0xc0>
    11fa:	23 2d       	mov	r18, r3
    11fc:	21 60       	ori	r18, 0x01	; 1
    11fe:	16 c0       	rjmp	.+44     	; 0x122c <vfprintf+0xd8>
    1200:	83 2d       	mov	r24, r3
    1202:	82 60       	ori	r24, 0x02	; 2
    1204:	38 2e       	mov	r3, r24
    1206:	e3 2d       	mov	r30, r3
    1208:	e4 60       	ori	r30, 0x04	; 4
    120a:	3e 2e       	mov	r3, r30
    120c:	2a c0       	rjmp	.+84     	; 0x1262 <vfprintf+0x10e>
    120e:	f3 2d       	mov	r31, r3
    1210:	f8 60       	ori	r31, 0x08	; 8
    1212:	1d c0       	rjmp	.+58     	; 0x124e <vfprintf+0xfa>
    1214:	37 fc       	sbrc	r3, 7
    1216:	2d c0       	rjmp	.+90     	; 0x1272 <vfprintf+0x11e>
    1218:	20 ed       	ldi	r18, 0xD0	; 208
    121a:	28 0f       	add	r18, r24
    121c:	2a 30       	cpi	r18, 0x0A	; 10
    121e:	40 f0       	brcs	.+16     	; 0x1230 <vfprintf+0xdc>
    1220:	8e 32       	cpi	r24, 0x2E	; 46
    1222:	b9 f4       	brne	.+46     	; 0x1252 <vfprintf+0xfe>
    1224:	36 fc       	sbrc	r3, 6
    1226:	81 c1       	rjmp	.+770    	; 0x152a <vfprintf+0x3d6>
    1228:	23 2d       	mov	r18, r3
    122a:	20 64       	ori	r18, 0x40	; 64
    122c:	32 2e       	mov	r3, r18
    122e:	19 c0       	rjmp	.+50     	; 0x1262 <vfprintf+0x10e>
    1230:	36 fe       	sbrs	r3, 6
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <vfprintf+0xec>
    1234:	8a e0       	ldi	r24, 0x0A	; 10
    1236:	98 9e       	mul	r9, r24
    1238:	20 0d       	add	r18, r0
    123a:	11 24       	eor	r1, r1
    123c:	92 2e       	mov	r9, r18
    123e:	11 c0       	rjmp	.+34     	; 0x1262 <vfprintf+0x10e>
    1240:	ea e0       	ldi	r30, 0x0A	; 10
    1242:	2e 9e       	mul	r2, r30
    1244:	20 0d       	add	r18, r0
    1246:	11 24       	eor	r1, r1
    1248:	22 2e       	mov	r2, r18
    124a:	f3 2d       	mov	r31, r3
    124c:	f0 62       	ori	r31, 0x20	; 32
    124e:	3f 2e       	mov	r3, r31
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <vfprintf+0x10e>
    1252:	8c 36       	cpi	r24, 0x6C	; 108
    1254:	21 f4       	brne	.+8      	; 0x125e <vfprintf+0x10a>
    1256:	83 2d       	mov	r24, r3
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	38 2e       	mov	r3, r24
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <vfprintf+0x10e>
    125e:	88 36       	cpi	r24, 0x68	; 104
    1260:	41 f4       	brne	.+16     	; 0x1272 <vfprintf+0x11e>
    1262:	f7 01       	movw	r30, r14
    1264:	93 fd       	sbrc	r25, 3
    1266:	85 91       	lpm	r24, Z+
    1268:	93 ff       	sbrs	r25, 3
    126a:	81 91       	ld	r24, Z+
    126c:	7f 01       	movw	r14, r30
    126e:	81 11       	cpse	r24, r1
    1270:	b3 cf       	rjmp	.-154    	; 0x11d8 <vfprintf+0x84>
    1272:	98 2f       	mov	r25, r24
    1274:	9f 7d       	andi	r25, 0xDF	; 223
    1276:	95 54       	subi	r25, 0x45	; 69
    1278:	93 30       	cpi	r25, 0x03	; 3
    127a:	28 f4       	brcc	.+10     	; 0x1286 <vfprintf+0x132>
    127c:	0c 5f       	subi	r16, 0xFC	; 252
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	9f e3       	ldi	r25, 0x3F	; 63
    1282:	99 83       	std	Y+1, r25	; 0x01
    1284:	0d c0       	rjmp	.+26     	; 0x12a0 <vfprintf+0x14c>
    1286:	83 36       	cpi	r24, 0x63	; 99
    1288:	31 f0       	breq	.+12     	; 0x1296 <vfprintf+0x142>
    128a:	83 37       	cpi	r24, 0x73	; 115
    128c:	71 f0       	breq	.+28     	; 0x12aa <vfprintf+0x156>
    128e:	83 35       	cpi	r24, 0x53	; 83
    1290:	09 f0       	breq	.+2      	; 0x1294 <vfprintf+0x140>
    1292:	59 c0       	rjmp	.+178    	; 0x1346 <vfprintf+0x1f2>
    1294:	21 c0       	rjmp	.+66     	; 0x12d8 <vfprintf+0x184>
    1296:	f8 01       	movw	r30, r16
    1298:	80 81       	ld	r24, Z
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	0e 5f       	subi	r16, 0xFE	; 254
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	88 24       	eor	r8, r8
    12a2:	83 94       	inc	r8
    12a4:	91 2c       	mov	r9, r1
    12a6:	53 01       	movw	r10, r6
    12a8:	13 c0       	rjmp	.+38     	; 0x12d0 <vfprintf+0x17c>
    12aa:	28 01       	movw	r4, r16
    12ac:	f2 e0       	ldi	r31, 0x02	; 2
    12ae:	4f 0e       	add	r4, r31
    12b0:	51 1c       	adc	r5, r1
    12b2:	f8 01       	movw	r30, r16
    12b4:	a0 80       	ld	r10, Z
    12b6:	b1 80       	ldd	r11, Z+1	; 0x01
    12b8:	36 fe       	sbrs	r3, 6
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <vfprintf+0x16e>
    12bc:	69 2d       	mov	r22, r9
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x172>
    12c2:	6f ef       	ldi	r22, 0xFF	; 255
    12c4:	7f ef       	ldi	r23, 0xFF	; 255
    12c6:	c5 01       	movw	r24, r10
    12c8:	0e 94 bf 0a 	call	0x157e	; 0x157e <strnlen>
    12cc:	4c 01       	movw	r8, r24
    12ce:	82 01       	movw	r16, r4
    12d0:	f3 2d       	mov	r31, r3
    12d2:	ff 77       	andi	r31, 0x7F	; 127
    12d4:	3f 2e       	mov	r3, r31
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <vfprintf+0x1b0>
    12d8:	28 01       	movw	r4, r16
    12da:	22 e0       	ldi	r18, 0x02	; 2
    12dc:	42 0e       	add	r4, r18
    12de:	51 1c       	adc	r5, r1
    12e0:	f8 01       	movw	r30, r16
    12e2:	a0 80       	ld	r10, Z
    12e4:	b1 80       	ldd	r11, Z+1	; 0x01
    12e6:	36 fe       	sbrs	r3, 6
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <vfprintf+0x19c>
    12ea:	69 2d       	mov	r22, r9
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <vfprintf+0x1a0>
    12f0:	6f ef       	ldi	r22, 0xFF	; 255
    12f2:	7f ef       	ldi	r23, 0xFF	; 255
    12f4:	c5 01       	movw	r24, r10
    12f6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <strnlen_P>
    12fa:	4c 01       	movw	r8, r24
    12fc:	f3 2d       	mov	r31, r3
    12fe:	f0 68       	ori	r31, 0x80	; 128
    1300:	3f 2e       	mov	r3, r31
    1302:	82 01       	movw	r16, r4
    1304:	33 fc       	sbrc	r3, 3
    1306:	1b c0       	rjmp	.+54     	; 0x133e <vfprintf+0x1ea>
    1308:	82 2d       	mov	r24, r2
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 16       	cp	r8, r24
    130e:	99 06       	cpc	r9, r25
    1310:	b0 f4       	brcc	.+44     	; 0x133e <vfprintf+0x1ea>
    1312:	b6 01       	movw	r22, r12
    1314:	80 e2       	ldi	r24, 0x20	; 32
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    131c:	2a 94       	dec	r2
    131e:	f4 cf       	rjmp	.-24     	; 0x1308 <vfprintf+0x1b4>
    1320:	f5 01       	movw	r30, r10
    1322:	37 fc       	sbrc	r3, 7
    1324:	85 91       	lpm	r24, Z+
    1326:	37 fe       	sbrs	r3, 7
    1328:	81 91       	ld	r24, Z+
    132a:	5f 01       	movw	r10, r30
    132c:	b6 01       	movw	r22, r12
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    1334:	21 10       	cpse	r2, r1
    1336:	2a 94       	dec	r2
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	82 1a       	sub	r8, r18
    133c:	91 08       	sbc	r9, r1
    133e:	81 14       	cp	r8, r1
    1340:	91 04       	cpc	r9, r1
    1342:	71 f7       	brne	.-36     	; 0x1320 <vfprintf+0x1cc>
    1344:	e8 c0       	rjmp	.+464    	; 0x1516 <vfprintf+0x3c2>
    1346:	84 36       	cpi	r24, 0x64	; 100
    1348:	11 f0       	breq	.+4      	; 0x134e <vfprintf+0x1fa>
    134a:	89 36       	cpi	r24, 0x69	; 105
    134c:	41 f5       	brne	.+80     	; 0x139e <vfprintf+0x24a>
    134e:	f8 01       	movw	r30, r16
    1350:	37 fe       	sbrs	r3, 7
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <vfprintf+0x20e>
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	0c 5f       	subi	r16, 0xFC	; 252
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	08 c0       	rjmp	.+16     	; 0x1372 <vfprintf+0x21e>
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	07 2e       	mov	r0, r23
    1368:	00 0c       	add	r0, r0
    136a:	88 0b       	sbc	r24, r24
    136c:	99 0b       	sbc	r25, r25
    136e:	0e 5f       	subi	r16, 0xFE	; 254
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	f3 2d       	mov	r31, r3
    1374:	ff 76       	andi	r31, 0x6F	; 111
    1376:	3f 2e       	mov	r3, r31
    1378:	97 ff       	sbrs	r25, 7
    137a:	09 c0       	rjmp	.+18     	; 0x138e <vfprintf+0x23a>
    137c:	90 95       	com	r25
    137e:	80 95       	com	r24
    1380:	70 95       	com	r23
    1382:	61 95       	neg	r22
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	f0 68       	ori	r31, 0x80	; 128
    138c:	3f 2e       	mov	r3, r31
    138e:	2a e0       	ldi	r18, 0x0A	; 10
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	a3 01       	movw	r20, r6
    1394:	0e 94 06 0b 	call	0x160c	; 0x160c <__ultoa_invert>
    1398:	88 2e       	mov	r8, r24
    139a:	86 18       	sub	r8, r6
    139c:	45 c0       	rjmp	.+138    	; 0x1428 <vfprintf+0x2d4>
    139e:	85 37       	cpi	r24, 0x75	; 117
    13a0:	31 f4       	brne	.+12     	; 0x13ae <vfprintf+0x25a>
    13a2:	23 2d       	mov	r18, r3
    13a4:	2f 7e       	andi	r18, 0xEF	; 239
    13a6:	b2 2e       	mov	r11, r18
    13a8:	2a e0       	ldi	r18, 0x0A	; 10
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	25 c0       	rjmp	.+74     	; 0x13f8 <vfprintf+0x2a4>
    13ae:	93 2d       	mov	r25, r3
    13b0:	99 7f       	andi	r25, 0xF9	; 249
    13b2:	b9 2e       	mov	r11, r25
    13b4:	8f 36       	cpi	r24, 0x6F	; 111
    13b6:	c1 f0       	breq	.+48     	; 0x13e8 <vfprintf+0x294>
    13b8:	18 f4       	brcc	.+6      	; 0x13c0 <vfprintf+0x26c>
    13ba:	88 35       	cpi	r24, 0x58	; 88
    13bc:	79 f0       	breq	.+30     	; 0x13dc <vfprintf+0x288>
    13be:	b5 c0       	rjmp	.+362    	; 0x152a <vfprintf+0x3d6>
    13c0:	80 37       	cpi	r24, 0x70	; 112
    13c2:	19 f0       	breq	.+6      	; 0x13ca <vfprintf+0x276>
    13c4:	88 37       	cpi	r24, 0x78	; 120
    13c6:	21 f0       	breq	.+8      	; 0x13d0 <vfprintf+0x27c>
    13c8:	b0 c0       	rjmp	.+352    	; 0x152a <vfprintf+0x3d6>
    13ca:	e9 2f       	mov	r30, r25
    13cc:	e0 61       	ori	r30, 0x10	; 16
    13ce:	be 2e       	mov	r11, r30
    13d0:	b4 fe       	sbrs	r11, 4
    13d2:	0d c0       	rjmp	.+26     	; 0x13ee <vfprintf+0x29a>
    13d4:	fb 2d       	mov	r31, r11
    13d6:	f4 60       	ori	r31, 0x04	; 4
    13d8:	bf 2e       	mov	r11, r31
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <vfprintf+0x29a>
    13dc:	34 fe       	sbrs	r3, 4
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <vfprintf+0x2a0>
    13e0:	29 2f       	mov	r18, r25
    13e2:	26 60       	ori	r18, 0x06	; 6
    13e4:	b2 2e       	mov	r11, r18
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <vfprintf+0x2a0>
    13e8:	28 e0       	ldi	r18, 0x08	; 8
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <vfprintf+0x2a4>
    13ee:	20 e1       	ldi	r18, 0x10	; 16
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <vfprintf+0x2a4>
    13f4:	20 e1       	ldi	r18, 0x10	; 16
    13f6:	32 e0       	ldi	r19, 0x02	; 2
    13f8:	f8 01       	movw	r30, r16
    13fa:	b7 fe       	sbrs	r11, 7
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <vfprintf+0x2b8>
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	0c 5f       	subi	r16, 0xFC	; 252
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <vfprintf+0x2c4>
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 5f       	subi	r16, 0xFE	; 254
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	a3 01       	movw	r20, r6
    141a:	0e 94 06 0b 	call	0x160c	; 0x160c <__ultoa_invert>
    141e:	88 2e       	mov	r8, r24
    1420:	86 18       	sub	r8, r6
    1422:	fb 2d       	mov	r31, r11
    1424:	ff 77       	andi	r31, 0x7F	; 127
    1426:	3f 2e       	mov	r3, r31
    1428:	36 fe       	sbrs	r3, 6
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <vfprintf+0x2f2>
    142c:	23 2d       	mov	r18, r3
    142e:	2e 7f       	andi	r18, 0xFE	; 254
    1430:	a2 2e       	mov	r10, r18
    1432:	89 14       	cp	r8, r9
    1434:	58 f4       	brcc	.+22     	; 0x144c <vfprintf+0x2f8>
    1436:	34 fe       	sbrs	r3, 4
    1438:	0b c0       	rjmp	.+22     	; 0x1450 <vfprintf+0x2fc>
    143a:	32 fc       	sbrc	r3, 2
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <vfprintf+0x2fc>
    143e:	83 2d       	mov	r24, r3
    1440:	8e 7e       	andi	r24, 0xEE	; 238
    1442:	a8 2e       	mov	r10, r24
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <vfprintf+0x2fc>
    1446:	b8 2c       	mov	r11, r8
    1448:	a3 2c       	mov	r10, r3
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <vfprintf+0x2fe>
    144c:	b8 2c       	mov	r11, r8
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <vfprintf+0x2fe>
    1450:	b9 2c       	mov	r11, r9
    1452:	a4 fe       	sbrs	r10, 4
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <vfprintf+0x320>
    1456:	fe 01       	movw	r30, r28
    1458:	e8 0d       	add	r30, r8
    145a:	f1 1d       	adc	r31, r1
    145c:	80 81       	ld	r24, Z
    145e:	80 33       	cpi	r24, 0x30	; 48
    1460:	21 f4       	brne	.+8      	; 0x146a <vfprintf+0x316>
    1462:	9a 2d       	mov	r25, r10
    1464:	99 7e       	andi	r25, 0xE9	; 233
    1466:	a9 2e       	mov	r10, r25
    1468:	09 c0       	rjmp	.+18     	; 0x147c <vfprintf+0x328>
    146a:	a2 fe       	sbrs	r10, 2
    146c:	06 c0       	rjmp	.+12     	; 0x147a <vfprintf+0x326>
    146e:	b3 94       	inc	r11
    1470:	b3 94       	inc	r11
    1472:	04 c0       	rjmp	.+8      	; 0x147c <vfprintf+0x328>
    1474:	8a 2d       	mov	r24, r10
    1476:	86 78       	andi	r24, 0x86	; 134
    1478:	09 f0       	breq	.+2      	; 0x147c <vfprintf+0x328>
    147a:	b3 94       	inc	r11
    147c:	a3 fc       	sbrc	r10, 3
    147e:	11 c0       	rjmp	.+34     	; 0x14a2 <vfprintf+0x34e>
    1480:	a0 fe       	sbrs	r10, 0
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <vfprintf+0x33c>
    1484:	b2 14       	cp	r11, r2
    1486:	88 f4       	brcc	.+34     	; 0x14aa <vfprintf+0x356>
    1488:	28 0c       	add	r2, r8
    148a:	92 2c       	mov	r9, r2
    148c:	9b 18       	sub	r9, r11
    148e:	0e c0       	rjmp	.+28     	; 0x14ac <vfprintf+0x358>
    1490:	b2 14       	cp	r11, r2
    1492:	60 f4       	brcc	.+24     	; 0x14ac <vfprintf+0x358>
    1494:	b6 01       	movw	r22, r12
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    149e:	b3 94       	inc	r11
    14a0:	f7 cf       	rjmp	.-18     	; 0x1490 <vfprintf+0x33c>
    14a2:	b2 14       	cp	r11, r2
    14a4:	18 f4       	brcc	.+6      	; 0x14ac <vfprintf+0x358>
    14a6:	2b 18       	sub	r2, r11
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x35a>
    14aa:	98 2c       	mov	r9, r8
    14ac:	21 2c       	mov	r2, r1
    14ae:	a4 fe       	sbrs	r10, 4
    14b0:	10 c0       	rjmp	.+32     	; 0x14d2 <vfprintf+0x37e>
    14b2:	b6 01       	movw	r22, r12
    14b4:	80 e3       	ldi	r24, 0x30	; 48
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    14bc:	a2 fe       	sbrs	r10, 2
    14be:	17 c0       	rjmp	.+46     	; 0x14ee <vfprintf+0x39a>
    14c0:	a1 fc       	sbrc	r10, 1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <vfprintf+0x376>
    14c4:	88 e7       	ldi	r24, 0x78	; 120
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <vfprintf+0x37a>
    14ca:	88 e5       	ldi	r24, 0x58	; 88
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	b6 01       	movw	r22, r12
    14d0:	0c c0       	rjmp	.+24     	; 0x14ea <vfprintf+0x396>
    14d2:	8a 2d       	mov	r24, r10
    14d4:	86 78       	andi	r24, 0x86	; 134
    14d6:	59 f0       	breq	.+22     	; 0x14ee <vfprintf+0x39a>
    14d8:	a1 fe       	sbrs	r10, 1
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <vfprintf+0x38c>
    14dc:	8b e2       	ldi	r24, 0x2B	; 43
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <vfprintf+0x38e>
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	a7 fc       	sbrc	r10, 7
    14e4:	8d e2       	ldi	r24, 0x2D	; 45
    14e6:	b6 01       	movw	r22, r12
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    14ee:	89 14       	cp	r8, r9
    14f0:	38 f4       	brcc	.+14     	; 0x1500 <vfprintf+0x3ac>
    14f2:	b6 01       	movw	r22, r12
    14f4:	80 e3       	ldi	r24, 0x30	; 48
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    14fc:	9a 94       	dec	r9
    14fe:	f7 cf       	rjmp	.-18     	; 0x14ee <vfprintf+0x39a>
    1500:	8a 94       	dec	r8
    1502:	f3 01       	movw	r30, r6
    1504:	e8 0d       	add	r30, r8
    1506:	f1 1d       	adc	r31, r1
    1508:	80 81       	ld	r24, Z
    150a:	b6 01       	movw	r22, r12
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    1512:	81 10       	cpse	r8, r1
    1514:	f5 cf       	rjmp	.-22     	; 0x1500 <vfprintf+0x3ac>
    1516:	22 20       	and	r2, r2
    1518:	09 f4       	brne	.+2      	; 0x151c <vfprintf+0x3c8>
    151a:	42 ce       	rjmp	.-892    	; 0x11a0 <vfprintf+0x4c>
    151c:	b6 01       	movw	r22, r12
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 ca 0a 	call	0x1594	; 0x1594 <fputc>
    1526:	2a 94       	dec	r2
    1528:	f6 cf       	rjmp	.-20     	; 0x1516 <vfprintf+0x3c2>
    152a:	f6 01       	movw	r30, r12
    152c:	86 81       	ldd	r24, Z+6	; 0x06
    152e:	97 81       	ldd	r25, Z+7	; 0x07
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <vfprintf+0x3e2>
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    1536:	2b 96       	adiw	r28, 0x0b	; 11
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	bf 90       	pop	r11
    1554:	af 90       	pop	r10
    1556:	9f 90       	pop	r9
    1558:	8f 90       	pop	r8
    155a:	7f 90       	pop	r7
    155c:	6f 90       	pop	r6
    155e:	5f 90       	pop	r5
    1560:	4f 90       	pop	r4
    1562:	3f 90       	pop	r3
    1564:	2f 90       	pop	r2
    1566:	08 95       	ret

00001568 <strnlen_P>:
    1568:	fc 01       	movw	r30, r24
    156a:	05 90       	lpm	r0, Z+
    156c:	61 50       	subi	r22, 0x01	; 1
    156e:	70 40       	sbci	r23, 0x00	; 0
    1570:	01 10       	cpse	r0, r1
    1572:	d8 f7       	brcc	.-10     	; 0x156a <strnlen_P+0x2>
    1574:	80 95       	com	r24
    1576:	90 95       	com	r25
    1578:	8e 0f       	add	r24, r30
    157a:	9f 1f       	adc	r25, r31
    157c:	08 95       	ret

0000157e <strnlen>:
    157e:	fc 01       	movw	r30, r24
    1580:	61 50       	subi	r22, 0x01	; 1
    1582:	70 40       	sbci	r23, 0x00	; 0
    1584:	01 90       	ld	r0, Z+
    1586:	01 10       	cpse	r0, r1
    1588:	d8 f7       	brcc	.-10     	; 0x1580 <strnlen+0x2>
    158a:	80 95       	com	r24
    158c:	90 95       	com	r25
    158e:	8e 0f       	add	r24, r30
    1590:	9f 1f       	adc	r25, r31
    1592:	08 95       	ret

00001594 <fputc>:
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	fb 01       	movw	r30, r22
    159e:	23 81       	ldd	r18, Z+3	; 0x03
    15a0:	21 fd       	sbrc	r18, 1
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <fputc+0x16>
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	9f ef       	ldi	r25, 0xFF	; 255
    15a8:	2c c0       	rjmp	.+88     	; 0x1602 <fputc+0x6e>
    15aa:	22 ff       	sbrs	r18, 2
    15ac:	16 c0       	rjmp	.+44     	; 0x15da <fputc+0x46>
    15ae:	46 81       	ldd	r20, Z+6	; 0x06
    15b0:	57 81       	ldd	r21, Z+7	; 0x07
    15b2:	24 81       	ldd	r18, Z+4	; 0x04
    15b4:	35 81       	ldd	r19, Z+5	; 0x05
    15b6:	42 17       	cp	r20, r18
    15b8:	53 07       	cpc	r21, r19
    15ba:	44 f4       	brge	.+16     	; 0x15cc <fputc+0x38>
    15bc:	a0 81       	ld	r26, Z
    15be:	b1 81       	ldd	r27, Z+1	; 0x01
    15c0:	9d 01       	movw	r18, r26
    15c2:	2f 5f       	subi	r18, 0xFF	; 255
    15c4:	3f 4f       	sbci	r19, 0xFF	; 255
    15c6:	31 83       	std	Z+1, r19	; 0x01
    15c8:	20 83       	st	Z, r18
    15ca:	8c 93       	st	X, r24
    15cc:	26 81       	ldd	r18, Z+6	; 0x06
    15ce:	37 81       	ldd	r19, Z+7	; 0x07
    15d0:	2f 5f       	subi	r18, 0xFF	; 255
    15d2:	3f 4f       	sbci	r19, 0xFF	; 255
    15d4:	37 83       	std	Z+7, r19	; 0x07
    15d6:	26 83       	std	Z+6, r18	; 0x06
    15d8:	14 c0       	rjmp	.+40     	; 0x1602 <fputc+0x6e>
    15da:	8b 01       	movw	r16, r22
    15dc:	ec 01       	movw	r28, r24
    15de:	fb 01       	movw	r30, r22
    15e0:	00 84       	ldd	r0, Z+8	; 0x08
    15e2:	f1 85       	ldd	r31, Z+9	; 0x09
    15e4:	e0 2d       	mov	r30, r0
    15e6:	09 95       	icall
    15e8:	89 2b       	or	r24, r25
    15ea:	e1 f6       	brne	.-72     	; 0x15a4 <fputc+0x10>
    15ec:	d8 01       	movw	r26, r16
    15ee:	16 96       	adiw	r26, 0x06	; 6
    15f0:	8d 91       	ld	r24, X+
    15f2:	9c 91       	ld	r25, X
    15f4:	17 97       	sbiw	r26, 0x07	; 7
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	17 96       	adiw	r26, 0x07	; 7
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	16 97       	sbiw	r26, 0x06	; 6
    1600:	ce 01       	movw	r24, r28
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <__ultoa_invert>:
    160c:	fa 01       	movw	r30, r20
    160e:	aa 27       	eor	r26, r26
    1610:	28 30       	cpi	r18, 0x08	; 8
    1612:	51 f1       	breq	.+84     	; 0x1668 <__ultoa_invert+0x5c>
    1614:	20 31       	cpi	r18, 0x10	; 16
    1616:	81 f1       	breq	.+96     	; 0x1678 <__ultoa_invert+0x6c>
    1618:	e8 94       	clt
    161a:	6f 93       	push	r22
    161c:	6e 7f       	andi	r22, 0xFE	; 254
    161e:	6e 5f       	subi	r22, 0xFE	; 254
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	8f 4f       	sbci	r24, 0xFF	; 255
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	af 4f       	sbci	r26, 0xFF	; 255
    1628:	b1 e0       	ldi	r27, 0x01	; 1
    162a:	3e d0       	rcall	.+124    	; 0x16a8 <__ultoa_invert+0x9c>
    162c:	b4 e0       	ldi	r27, 0x04	; 4
    162e:	3c d0       	rcall	.+120    	; 0x16a8 <__ultoa_invert+0x9c>
    1630:	67 0f       	add	r22, r23
    1632:	78 1f       	adc	r23, r24
    1634:	89 1f       	adc	r24, r25
    1636:	9a 1f       	adc	r25, r26
    1638:	a1 1d       	adc	r26, r1
    163a:	68 0f       	add	r22, r24
    163c:	79 1f       	adc	r23, r25
    163e:	8a 1f       	adc	r24, r26
    1640:	91 1d       	adc	r25, r1
    1642:	a1 1d       	adc	r26, r1
    1644:	6a 0f       	add	r22, r26
    1646:	71 1d       	adc	r23, r1
    1648:	81 1d       	adc	r24, r1
    164a:	91 1d       	adc	r25, r1
    164c:	a1 1d       	adc	r26, r1
    164e:	20 d0       	rcall	.+64     	; 0x1690 <__ultoa_invert+0x84>
    1650:	09 f4       	brne	.+2      	; 0x1654 <__ultoa_invert+0x48>
    1652:	68 94       	set
    1654:	3f 91       	pop	r19
    1656:	2a e0       	ldi	r18, 0x0A	; 10
    1658:	26 9f       	mul	r18, r22
    165a:	11 24       	eor	r1, r1
    165c:	30 19       	sub	r19, r0
    165e:	30 5d       	subi	r19, 0xD0	; 208
    1660:	31 93       	st	Z+, r19
    1662:	de f6       	brtc	.-74     	; 0x161a <__ultoa_invert+0xe>
    1664:	cf 01       	movw	r24, r30
    1666:	08 95       	ret
    1668:	46 2f       	mov	r20, r22
    166a:	47 70       	andi	r20, 0x07	; 7
    166c:	40 5d       	subi	r20, 0xD0	; 208
    166e:	41 93       	st	Z+, r20
    1670:	b3 e0       	ldi	r27, 0x03	; 3
    1672:	0f d0       	rcall	.+30     	; 0x1692 <__ultoa_invert+0x86>
    1674:	c9 f7       	brne	.-14     	; 0x1668 <__ultoa_invert+0x5c>
    1676:	f6 cf       	rjmp	.-20     	; 0x1664 <__ultoa_invert+0x58>
    1678:	46 2f       	mov	r20, r22
    167a:	4f 70       	andi	r20, 0x0F	; 15
    167c:	40 5d       	subi	r20, 0xD0	; 208
    167e:	4a 33       	cpi	r20, 0x3A	; 58
    1680:	18 f0       	brcs	.+6      	; 0x1688 <__ultoa_invert+0x7c>
    1682:	49 5d       	subi	r20, 0xD9	; 217
    1684:	31 fd       	sbrc	r19, 1
    1686:	40 52       	subi	r20, 0x20	; 32
    1688:	41 93       	st	Z+, r20
    168a:	02 d0       	rcall	.+4      	; 0x1690 <__ultoa_invert+0x84>
    168c:	a9 f7       	brne	.-22     	; 0x1678 <__ultoa_invert+0x6c>
    168e:	ea cf       	rjmp	.-44     	; 0x1664 <__ultoa_invert+0x58>
    1690:	b4 e0       	ldi	r27, 0x04	; 4
    1692:	a6 95       	lsr	r26
    1694:	97 95       	ror	r25
    1696:	87 95       	ror	r24
    1698:	77 95       	ror	r23
    169a:	67 95       	ror	r22
    169c:	ba 95       	dec	r27
    169e:	c9 f7       	brne	.-14     	; 0x1692 <__ultoa_invert+0x86>
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	61 05       	cpc	r22, r1
    16a4:	71 05       	cpc	r23, r1
    16a6:	08 95       	ret
    16a8:	9b 01       	movw	r18, r22
    16aa:	ac 01       	movw	r20, r24
    16ac:	0a 2e       	mov	r0, r26
    16ae:	06 94       	lsr	r0
    16b0:	57 95       	ror	r21
    16b2:	47 95       	ror	r20
    16b4:	37 95       	ror	r19
    16b6:	27 95       	ror	r18
    16b8:	ba 95       	dec	r27
    16ba:	c9 f7       	brne	.-14     	; 0x16ae <__ultoa_invert+0xa2>
    16bc:	62 0f       	add	r22, r18
    16be:	73 1f       	adc	r23, r19
    16c0:	84 1f       	adc	r24, r20
    16c2:	95 1f       	adc	r25, r21
    16c4:	a0 1d       	adc	r26, r0
    16c6:	08 95       	ret

000016c8 <_exit>:
    16c8:	f8 94       	cli

000016ca <__stop_program>:
    16ca:	ff cf       	rjmp	.-2      	; 0x16ca <__stop_program>
